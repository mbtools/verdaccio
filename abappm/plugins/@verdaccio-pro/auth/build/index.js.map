{"version":3,"sources":["../src/index.ts","../src/plugin.ts","../src/db/index.ts","../src/env.ts","../src/db/logger.ts","../src/db/tools/colors.ts","../src/services/user-secrets.ts","../src/cipher.ts","../src/db/schema/index.ts","../src/utils.ts"],"sourcesContent":["import AuthPlugin, { AuthConfig } from './plugin'\n\nexport { AuthPlugin }\nexport type { AuthConfig }\nexport default AuthPlugin\n","import buildDebug from 'debug'\n\nimport { errorUtils, pluginUtils } from '@verdaccio/core'\nimport { Config, Logger, PackageAccess, RemoteUser } from '@verdaccio/types'\n\nimport { getDatabase, type Database } from './db'\nimport { ENV } from './env'\nimport { UserSecretsService } from './services/user-secrets'\nimport { hashPassword, sanityCheck, verifyPassword } from './utils'\n\nexport interface AuthConfig {\n  url?: string\n  rounds: number\n  max_users: number\n  slow_verify_ms: number\n}\n\nexport enum AuthDefaults {\n  ROUNDS = 10,\n  MAX_USERS = Infinity,\n  SLOW_VERIFY_MS = 300,\n}\n\nconst debug = buildDebug('verdaccio:plugin:pro:auth')\n\nclass AuthPlugin extends pluginUtils.Plugin<AuthConfig> implements pluginUtils.Auth<AuthConfig> {\n  public config: Config\n  public logger: Logger\n  private authConfig: AuthConfig\n  private db: Database\n  private userSecretService: UserSecretsService\n\n  public constructor(config: AuthConfig, options: pluginUtils.PluginOptions) {\n    debug('start auth plugin')\n    super(config, options)\n    this.config = options.config\n    this.logger = options.logger\n\n    this.authConfig = {\n      url: config.url || ENV.DATABASE_URL,\n      rounds: config.rounds || AuthDefaults.ROUNDS,\n      max_users: config.max_users || AuthDefaults.MAX_USERS,\n      slow_verify_ms: config.slow_verify_ms || AuthDefaults.SLOW_VERIFY_MS,\n    }\n\n    if (!this.authConfig.url) {\n      throw errorUtils.getServiceUnavailable(\n        '[sql-storage] missing config. Add `store.@verdaccio-pro/sql-storage.url` to your config file or use environtment DATABASE_URL',\n      )\n    }\n\n    this.db = getDatabase(this.authConfig.url, this.logger)\n    this.userSecretService = new UserSecretsService(this.db, this.logger)\n\n    debug('Verdaccio Pro auth plugin is enabled')\n  }\n\n  public async authenticate(user: string, password: string, cb: pluginUtils.AuthCallback): Promise<void> {\n    debug('authenticate user %o', user)\n\n    const hash = await this.userSecretService.getHash(user)\n    if (!hash) {\n      debug('user not found')\n      return cb(null, false)\n    }\n\n    let passwordValid = false\n    try {\n      const start = new Date()\n      passwordValid = await verifyPassword(password, hash)\n      const durationMs = new Date().getTime() - start.getTime()\n      if (durationMs > this.authConfig.slow_verify_ms) {\n        debug('password took %sms to verify', durationMs)\n        this.logger.warn(\n          { user, durationMs },\n          'Password for user \"@{user}\" took @{durationMs}ms to verify',\n        )\n      }\n    }\n    catch (error) {\n      this.logger.error({ error }, 'Unable to verify user password: @{error.message}')\n    }\n    if (!passwordValid) {\n      debug('invalid password')\n      return cb(null, false)\n    }\n\n    debug('authentication succeeded!')\n    // return all usergroups this user has access to;\n    // (this particular plugin has no concept of usergroups, so just return user)\n    return cb(null, [user])\n  }\n\n  // TODO: email is not part of the Auth interface (yet)\n  public async adduser(user: string, password: string, cb: pluginUtils.AuthUserCallback, email?: string): Promise<void> {\n    debug('add user %o', user)\n\n    const count = await this.userSecretService.count()\n    const oldHash = await this.userSecretService.getHash(user)\n    const sanity = await sanityCheck(user, password, verifyPassword, oldHash, count, this.authConfig.max_users)\n\n    debug('sanity check: %o', sanity)\n    if (sanity) {\n      return cb(sanity, false)\n    }\n\n    const newHash = await hashPassword(password, this.authConfig.rounds)\n\n    try {\n      await this.userSecretService.add(user, newHash, email || '')\n      cb(null, true)\n    }\n    catch (error) {\n      cb(error as errorUtils.VerdaccioError, false)\n    }\n  }\n\n  public async removeUser(user: string): Promise<void> {\n    debug('remove user %o', user)\n\n    const hash = await this.userSecretService.getHash(user)\n    if (!hash) {\n      debug('user not found')\n      throw errorUtils.getNotFound(`User '${user}' not found`)\n    }\n\n    await this.userSecretService.remove(user)\n  }\n\n  public async changePassword(\n    user: string,\n    oldPassword: string,\n    newPassword: string,\n    cb: pluginUtils.AuthChangePasswordCallback,\n  ): Promise<void> {\n    debug('change password for user %o', user)\n\n    const hash = await this.userSecretService.getHash(user)\n    if (!hash) {\n      debug('user not found')\n      return cb(null, false)\n    }\n\n    const passwordValid = await verifyPassword(oldPassword, hash)\n    if (!passwordValid) {\n      debug('invalid old password')\n      throw new Error(`Unable to change password for user '${user}': invalid old password`)\n    }\n\n    const newHash = await hashPassword(newPassword, this.authConfig.rounds)\n\n    try {\n      await this.userSecretService.changePassword(user, newHash)\n      cb(null, true)\n    }\n    catch (error) {\n      cb(error as errorUtils.VerdaccioError, false)\n    }\n  }\n\n  public async allow_access(user: RemoteUser, pkg: PackageAccess, cb: pluginUtils.AccessCallback): Promise<void> {\n    // Everything is allowed\n    cb(null, true)\n  }\n\n  public async allow_publish(user: RemoteUser, pkg: PackageAccess, cb: pluginUtils.AuthAccessCallback): Promise<void> {\n    // Everything is allowed\n    cb(null, true)\n  }\n\n  public async allow_unpublish(user: RemoteUser, pkg: PackageAccess, cb: pluginUtils.AuthAccessCallback): Promise<void> {\n    // Everything is allowed\n    cb(null, true)\n  }\n}\n\nexport default AuthPlugin\n","import { drizzle } from 'drizzle-orm/node-postgres'\nimport { Logger } from '@verdaccio/types'\n\nimport { ENV } from '../env'\nimport { loggerFactory } from './logger'\n\nexport type Database = ReturnType<typeof drizzle>\n\nexport const getDatabase = (url: string, logger?: Logger): Database => {\n  const drizzleLogger = loggerFactory(logger)\n\n  const db = drizzle({\n    connection: {\n      connectionString: url,\n      max: ENV.DB_POOL_SIZE,\n      ssl: true,\n    },\n    logger: drizzleLogger,\n  })\n\n  if (logger) logger.info('database connected')\n\n  return db\n}\n","import { config } from 'dotenv'\nimport z from 'zod'\n\nconst stringBoolean = z.coerce\n  .string()\n  .transform((val) => {\n    return val === 'true'\n  })\n  .default(false)\n\nconst envSchema = z.object({\n  NODE_ENV: z.string().default('development'),\n  DATABASE_SECRET: z.string().trim().min(1),\n  DATABASE_URL: z.string().trim().min(1),\n  DB_POOL_SIZE: z.coerce.number().default(22),\n  DB_LOGGING: stringBoolean,\n  DB_SALT: z.string().default('saltypretzel'),\n})\n\n// Load environment variables from .env file\nconfig()\n\nconst envServer = envSchema.safeParse({\n  NODE_ENV: process.env.NODE_ENV,\n  DATABASE_SECRET: process.env.DATABASE_SECRET,\n  DATABASE_URL: process.env.DATABASE_URL,\n  DB_POOL_SIZE: process.env.DB_POOL_SIZE,\n  DB_LOGGING: process.env.DB_LOGGING,\n  DB_SALT: process.env.DB_SALT,\n})\n\nif (!envServer.success) {\n  throw new Error(envServer.error.message)\n}\n\ntype Env = z.infer<typeof envSchema>\n\nexport const ENV: Env = envSchema.parse(process.env)\n","import { DefaultLogger, LogWriter } from 'drizzle-orm/logger'\nimport { Logger } from '@verdaccio/types'\nimport { BLUE, CYAN, GREEN, MAGENTA, RED, RESET, YELLOW } from './tools/colors'\n\nclass VerdaccioLogWriter implements LogWriter {\n  constructor(private logger: Logger) {}\n\n  write(message: string) {\n    const msg = message.replace(/^Query:\\s*/i, '')\n\n    const coloredMsg = msg.replace(/^(\\w+)/i, (_, word) => {\n      const lword = word.toLowerCase()\n      const colors = {\n        select: CYAN,\n        insert: BLUE,\n        update: GREEN,\n        delete: MAGENTA,\n        truncate: RED,\n      }\n      const color = colors[lword as keyof typeof colors]\n      return `${color || YELLOW}${word}${RESET}`\n    })\n\n    this.logger.info(`SQL: ${coloredMsg}`)\n  }\n}\n\nexport const loggerFactory = (logger?: Logger): DefaultLogger | undefined => {\n  return logger ? new DefaultLogger({ writer: new VerdaccioLogWriter(logger!) }) : undefined\n}\n","export const BLACK = '\\x1b[30m'\nexport const RED = '\\x1b[31m'\nexport const GREEN = '\\x1b[32m'\nexport const YELLOW = '\\x1b[33m'\nexport const BLUE = '\\x1b[34m'\nexport const MAGENTA = '\\x1b[35m'\nexport const CYAN = '\\x1b[36m'\nexport const WHITE = '\\x1b[37m'\nexport const RESET = '\\x1b[0m'\n","import buildDebug from 'debug'\n\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { encrypt, decrypt } from '../cipher'\nimport { type Database } from '../db'\nimport { userSecrets } from '../db/schema'\nimport { and, eq, isNull } from 'drizzle-orm'\n\nconst debug = buildDebug('verdaccio:plugin:apm:auth')\n\nexport class UserSecretsService {\n  private db: Database\n  private logger: Logger\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n  }\n\n  public async count(): Promise<number> {\n    const userCount = await this.db\n      .$count(userSecrets, isNull(userSecrets.deleted))\n\n    return userCount\n  }\n\n  public async add(user: string, hash: string, email: string): Promise<void> {\n    try {\n      const encryptedHash = await encrypt(user + hash)\n      const encryptedEmail = await encrypt(email)\n      const userSecret = { user, hash: encryptedHash, email: encryptedEmail }\n\n      await this.db\n        .insert(userSecrets)\n        .values(userSecret)\n\n      debug('user added successfully')\n    }\n    catch (error) {\n      debug('user add error: %o', error)\n      throw errorUtils.getInternalError(`Error adding user: ${error}`)\n    }\n  }\n\n  public async remove(user: string): Promise<void> {\n    try {\n      await this.db\n        .update(userSecrets)\n        .set({ deleted: new Date() })\n        .where(eq(userSecrets.user, user))\n\n      debug('user removed successfully')\n    }\n    catch (error) {\n      debug('user remove error: %o', error)\n      throw errorUtils.getInternalError(`Error removing user: ${error}`)\n    }\n  }\n\n  public async getHash(user: string): Promise<string | null> {\n    const [userSecret] = await this.db\n      .select({ hash: userSecrets.hash })\n      .from(userSecrets)\n      .where(and(eq(userSecrets.user, user), isNull(userSecrets.deleted)))\n\n    if (!userSecret) {\n      debug('user %s not found', user)\n      return null\n    }\n\n    const decryptedHash = decrypt(user + userSecret.hash)\n    return decryptedHash\n  }\n\n  public async getEmail(user: string): Promise<string | null> {\n    const [userSecret] = await this.db\n      .select({ email: userSecrets.email })\n      .from(userSecrets)\n      .where(and(eq(userSecrets.user, user), isNull(userSecrets.deleted)))\n\n    if (!userSecret) {\n      debug('user %s not found', user)\n      return null\n    }\n\n    const decryptedEmail = decrypt(user + userSecret.email)\n    return decryptedEmail\n  }\n\n  public async changePassword(user: string, hash: string): Promise<void> {\n    try {\n      const encryptedHash = await encrypt(user + hash)\n      await this.db\n        .update(userSecrets)\n        .set({ hash: encryptedHash, updated: new Date(), deleted: null })\n        .where(eq(userSecrets.user, user))\n\n      debug('password changed successfully')\n    }\n    catch (error) {\n      debug('password change error: %o', error)\n      throw errorUtils.getInternalError(`Error changing password: ${error}`)\n    }\n  }\n\n  public async changeEmail(user: string, email: string): Promise<void> {\n    try {\n      const encryptedEmail = await encrypt(email)\n\n      await this.db\n        .update(userSecrets)\n        .set({ email: encryptedEmail, updated: new Date(), deleted: null })\n        .where(eq(userSecrets.user, user))\n\n      debug('email changed successfully')\n    }\n    catch (error) {\n      debug('email change error: %o', error)\n      throw errorUtils.getInternalError(`Error changing email: ${error}`)\n    }\n  }\n}\n","import {\n  scrypt,\n  randomFill,\n  createCipheriv,\n  createDecipheriv,\n} from 'node:crypto'\nimport { promisify } from 'node:util'\n\nimport { ENV } from './env'\n\nconst password = ENV.DATABASE_SECRET\nconst algorithm = 'aes-192-cbc'\nconst keyLength = 24 // 192 bits\nconst salt = ENV.DB_SALT\n\nconst scryptAsync = promisify(scrypt)\n\nasync function getKey() {\n  return scryptAsync(password, salt, keyLength) as Promise<Buffer>\n}\n\nexport async function encrypt(text: string): Promise<string> {\n  const key = await getKey()\n  const iv = Buffer.alloc(16)\n  await promisify(randomFill)(iv)\n\n  const cipher = createCipheriv(algorithm, key, iv)\n  const encrypted = cipher.update(text, 'utf8', 'hex') + cipher.final('hex')\n\n  return `${iv.toString('hex')}:${encrypted}`\n}\n\nexport async function decrypt(encryptedText: string): Promise<string> {\n  const [ivHex, encrypted] = encryptedText.split(':')\n  const key = await getKey()\n  const iv = Buffer.from(ivHex, 'hex')\n\n  const decipher = createDecipheriv(algorithm, key, iv)\n  return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8')\n}\n","import {\n  pgTable,\n  serial,\n  text,\n  timestamp,\n} from 'drizzle-orm/pg-core'\n\n// Common columns\nconst timestamps = {\n  created: timestamp().defaultNow().notNull(),\n  updated: timestamp().defaultNow().notNull(),\n}\nconst timestampsDeleted = {\n  ...timestamps,\n  deleted: timestamp(),\n}\n\n/**\n * User Secrets\n */\nexport const userSecrets = pgTable('user_secrets', {\n  id: serial().unique(),\n  user: text().primaryKey(),\n  hash: text().notNull(),\n  email: text().notNull(),\n  ...timestampsDeleted,\n})\n","import bcrypt from 'bcryptjs'\nimport buildDebug from 'debug'\n\nimport { errorUtils, API_ERROR, VerdaccioError } from '@verdaccio/core'\n\nconst debug = buildDebug('verdaccio:plugin:pro:auth')\n\n/**\n * verifyPassword - matches password and it's hash.\n */\nexport async function verifyPassword(passwd: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(passwd, hash)\n}\n\n/**\n * hashPassword - generates a hash for a password.\n */\nexport async function hashPassword(\n  passwd: string,\n  rounds: number,\n): Promise<string> {\n  const salt = await bcrypt.genSalt(rounds)\n  return await bcrypt.hash(passwd, salt)\n}\n\n/**\n * Sanity check for a user\n */\nexport async function sanityCheck(\n  user: string,\n  passwd: string,\n  verifyFn: (user: string, passwd: string) => Promise<boolean>,\n  hash: string | null,\n  count: number,\n  maxUsers: number,\n): Promise<VerdaccioError | null> {\n  if (!user || !passwd) {\n    debug('username or password is missing')\n    return errorUtils.getBadRequest(API_ERROR.USERNAME_PASSWORD_REQUIRED) // 400\n  }\n\n  if (maxUsers < 0) {\n    debug('registration is disabled')\n    return errorUtils.getConflict(API_ERROR.REGISTRATION_DISABLED) // 409\n  }\n\n  if (hash) {\n    const auth = await verifyFn(user, hash)\n    if (auth) {\n      debug(`user ${user} already exists`)\n      return errorUtils.getConflict(API_ERROR.USERNAME_ALREADY_REGISTERED) // 409\n    }\n    debug(`user ${user} exists but password is wrong`)\n    return errorUtils.getUnauthorized(API_ERROR.UNAUTHORIZED_ACCESS) // 401\n  }\n  else if (count >= maxUsers) {\n    debug('maximum amount of users reached')\n    return errorUtils.getForbidden(API_ERROR.MAX_USERS_REACHED)\n  }\n\n  debug('sanity check passed')\n  return null\n}\n"],"mappings":"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","names":["import_debug","import_core","z","text","buildDebug","import_debug","import_core","debug","buildDebug","bcrypt","salt","debug","buildDebug","config","password"]}