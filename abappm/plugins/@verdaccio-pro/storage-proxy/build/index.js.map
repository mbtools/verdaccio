{"version":3,"sources":["../src/index.ts","../src/storage-plugin.ts","../src/storage-handler.ts","../src/helper.ts"],"sourcesContent":["import ProxyStoragePlugin, { StorageConfig } from './storage-plugin'\n\nexport { ProxyStoragePlugin, StorageConfig }\nexport default ProxyStoragePlugin\n","import buildDebug from 'debug'\n\nimport { pluginUtils, searchUtils } from '@verdaccio/core'\nimport { Config, Logger, Token, TokenFilter } from '@verdaccio/types'\n\nimport ProxyStorageHandler from './storage-handler'\nimport { getBackend, loadStoragePlugins } from './helper'\n\nexport type StorageConfig = {\n  // The backend key for handle security and token accesses.\n  database_backend: string\n  // The backend key for handle search access.\n  search_backend: string\n  // The backend key for handle packument accesses.\n  packument_backend: string\n  // The backend key to handle tarball accesses.\n  tarball_backend: string\n  // The object to hold configurations of backend storages.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backends: any\n}\n\nconst debug = buildDebug('verdaccio:plugin:pro:storage:proxy')\n\nclass ProxyStoragePlugin\n  extends pluginUtils.Plugin<StorageConfig>\n  implements pluginUtils.Storage<StorageConfig> {\n  public logger: Logger\n  public config: Config\n  // The object to hold loaded backend storages.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public loadedBackends: any\n  private storageConfig: StorageConfig\n\n  public constructor(config: StorageConfig, options: pluginUtils.PluginOptions) {\n    debug('start storage proxy')\n    super(config, options)\n    this.config = options.config\n    this.logger = options.logger\n    this.storageConfig = config\n    // Note: constructor cannot be async, so plugin loading is moved to init\n  }\n\n  public async init(): Promise<void> {\n    debug('init storage plugin')\n    this.loadedBackends = await loadStoragePlugins(\n      this.storageConfig.backends,\n      { ...this },\n      // this.config?.serverSettings?.pluginPrefix,\n    )\n\n    const db = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    await db.init()\n    const search = getBackend(this.loadedBackends, this.storageConfig.search_backend)\n    await search.init()\n    const packument = getBackend(this.loadedBackends, this.storageConfig.packument_backend)\n    await packument.init()\n    const tarball = getBackend(this.loadedBackends, this.storageConfig.tarball_backend)\n    await tarball.init()\n  }\n\n  // Storage API\n\n  public getPackageStorage(packageName: string): ProxyStorageHandler {\n    return new ProxyStorageHandler(this.storageConfig, this.logger, this.loadedBackends, packageName)\n  }\n\n  // Secret API\n\n  public async getSecret(): Promise<string> {\n    debug('get secret')\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.getSecret()\n  }\n\n  public async setSecret(secret: string): Promise<string | null> {\n    debug('set secret')\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.setSecret(secret)\n  }\n\n  // Package API\n\n  public async get(): Promise<string[]> {\n    debug('get complete package list')\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.get()\n  }\n\n  public async add(packageName: string): Promise<void> {\n    debug('add package %o', packageName)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.add(packageName)\n  }\n\n  public async remove(packageName: string): Promise<void> {\n    debug('remove package %o', packageName)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.remove(packageName)\n  }\n\n  public async search(query: searchUtils.SearchQuery): Promise<searchUtils.SearchItem[]> {\n    debug('search for %o', query.text)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.search_backend)\n    return backend.search(query)\n  }\n\n  // Token API\n\n  public async readTokens(filter: TokenFilter): Promise<Token[]> {\n    debug('get tokens for user %o', filter.user)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.readTokens(filter)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async saveToken(token: Token): Promise<any> {\n    debug('save token for user %o', token.user)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.saveToken(token)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async deleteToken(user: string, tokenKey: string): Promise<any> {\n    debug('delete token for user %o and token %o', user, tokenKey)\n    const backend = getBackend(this.loadedBackends, this.storageConfig.database_backend)\n    return backend.deleteToken(user, tokenKey)\n  }\n}\n\nexport default ProxyStoragePlugin\n","import buildDebug from 'debug'\nimport { Readable, Writable } from 'node:stream'\n\nimport { pluginUtils } from '@verdaccio/core'\nimport { Logger, Manifest } from '@verdaccio/types'\n\nimport { StorageConfig } from './storage-plugin'\nimport { getBackend } from './helper'\n\nconst debug = buildDebug('verdaccio:plugin:pro:storage:proxy:handler')\n\nclass ProxyStorageHandler implements pluginUtils.StorageHandler {\n  public config: StorageConfig\n  public logger: Logger\n  public packageName: string\n  public packumentPackageStorage: pluginUtils.StorageHandler\n  public tarballPackageStorage: pluginUtils.StorageHandler\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(config: StorageConfig, logger: Logger, loadedBackends: any, packageName: string) {\n    debug('start storage handler')\n    this.config = config\n    this.logger = logger\n    this.packageName = packageName\n    const packumentBackend = getBackend(loadedBackends, this.config.packument_backend)\n    this.packumentPackageStorage = packumentBackend.getPackageStorage(packageName)\n    const tarballBackend = getBackend(loadedBackends, this.config.tarball_backend)\n    this.tarballPackageStorage = tarballBackend.getPackageStorage(packageName)\n  }\n\n  // Package API\n\n  public async readPackage(packageName: string): Promise<Manifest> {\n    debug('read package %o', packageName)\n    return this.packumentPackageStorage.readPackage(packageName)\n  }\n\n  public async hasPackage(packageName: string): Promise<boolean> {\n    debug('has package %o', packageName)\n    return this.packumentPackageStorage.hasPackage(packageName)\n  }\n\n  public async updatePackage(\n    packageName: string,\n    handleUpdate: (manifest: Manifest) => Promise<Manifest>,\n  ): Promise<Manifest> {\n    debug('update package %o', packageName)\n    return this.packumentPackageStorage.updatePackage(packageName, handleUpdate)\n  }\n\n  public async deletePackage(filename: string): Promise<void> {\n    debug('remove tarball %o', filename)\n    if (filename === 'package.json')\n      await this.packumentPackageStorage.deletePackage(filename)\n    else\n      await this.tarballPackageStorage.deletePackage(filename)\n  }\n\n  public async removePackage(packageName: string): Promise<void> {\n    debug('remove package %o', packageName)\n    await this.tarballPackageStorage.removePackage(packageName)\n    return this.packumentPackageStorage.removePackage(packageName)\n  }\n\n  public async createPackage(packageName: string, manifest: Manifest): Promise<void> {\n    debug('create package %o', packageName)\n    return this.packumentPackageStorage.createPackage(packageName, manifest)\n  }\n\n  public async savePackage(packageName: string, manifest: Manifest): Promise<void> {\n    debug('save package %o', packageName)\n    return this.packumentPackageStorage.savePackage(packageName, manifest)\n  }\n\n  // Tarball API\n\n  public async hasTarball(fileName: string): Promise<boolean> {\n    debug('has tarball %o', fileName)\n    return this.tarballPackageStorage.hasTarball(fileName)\n  }\n\n  public async readTarball(fileName: string, { signal }: { signal: AbortSignal }): Promise<Readable> {\n    debug('read tarball %o', fileName)\n    return this.tarballPackageStorage.readTarball(fileName, { signal })\n  }\n\n  public async writeTarball(fileName: string, { signal }: { signal: AbortSignal }): Promise<Writable> {\n    debug('write tarball %o', fileName)\n    return this.tarballPackageStorage.writeTarball(fileName, { signal })\n  }\n}\n\nexport default ProxyStorageHandler\n","import { pluginUtils, PLUGIN_CATEGORY } from '@verdaccio/core'\nimport { asyncLoadPlugin } from '@verdaccio/loaders'\n\nimport { StorageConfig } from './storage-plugin'\n\nconst PLUGIN_PREFIX = 'verdaccio'\n\nexport async function loadStoragePlugins(\n  backends: unknown,\n  options: pluginUtils.PluginOptions,\n  pluginPrefix: string = PLUGIN_PREFIX,\n) {\n  const storeSanitize = (plugin: pluginUtils.Storage<unknown>) => {\n    return typeof plugin.getPackageStorage === 'function'\n  }\n\n  // console.log('load backends ->', backends)\n  return asyncLoadPlugin<pluginUtils.Storage<unknown>>(\n    backends,\n    options,\n    storeSanitize,\n    false, // no legacy\n    pluginPrefix,\n    PLUGIN_CATEGORY.STORAGE,\n  )\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getBackend(backends: any, pluginId: string): pluginUtils.Storage<StorageConfig> {\n  console.log('get backends ->', backends)\n  const pluginName = `${PLUGIN_PREFIX}-${pluginId}`\n  const backend = backends[pluginName]\n  if (!backend) {\n    throw new Error(`Can not find plugin backend: ${pluginName}`)\n  }\n  return backend\n}\n"],"mappings":"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","names":["import_debug","import_core","buildDebug","debug","buildDebug"]}