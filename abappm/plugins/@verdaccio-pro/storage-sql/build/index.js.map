{"version":3,"sources":["../src/index.ts","../src/storage-plugin.ts","../src/db/index.ts","../src/env.ts","../src/db/logger.ts","../src/db/tools/colors.ts","../src/services/event-log.ts","../src/db/schema/index.ts","../src/services/org.ts","../src/services/tenant.ts","../src/services/downloads.ts","../src/services/utils.ts","../src/services/local-package.ts","../src/services/package.ts","../src/services/token.ts","../src/services/verdaccio-secret.ts","../src/storage-handler.ts","../src/services/tarball.ts"],"sourcesContent":["import SqlStoragePlugin, { StorageConfig } from './storage-plugin'\n\nexport { SqlStoragePlugin, StorageConfig }\nexport default SqlStoragePlugin\n","import buildDebug from 'debug'\n\nimport { errorUtils, pluginUtils, searchUtils } from '@verdaccio/core'\nimport { Config, Logger, Token, TokenFilter } from '@verdaccio/types'\n\nimport { getDatabase, type Database } from './db'\nimport { ENV } from './env'\nimport { EventLogService, type Method } from './services/event-log'\nimport { Downloads, DownloadsByVersion, DownloadsService } from './services/downloads'\nimport { LocalPackagesService } from './services/local-package'\nimport { PackageService } from './services/package'\nimport { TokenService } from './services/token'\nimport { VerdaccioSecretService } from './services/verdaccio-secret'\nimport SqlStorageHandler from './storage-handler'\n\nexport type StorageConfig = {\n  url: string\n}\n\nconst debug = buildDebug('verdaccio:plugin:pro:storage:sql')\n\nclass SqlStoragePlugin\n  extends pluginUtils.Plugin<StorageConfig>\n  implements pluginUtils.Storage<StorageConfig> {\n  public logger: Logger\n  public config: Config\n  private storageConfig: StorageConfig\n  private db: Database\n  private token: TokenService\n  private localPackage: LocalPackagesService\n  private verdaccioSecret: VerdaccioSecretService\n  private downloads: DownloadsService\n  private eventLog: EventLogService\n\n  public constructor(config: StorageConfig, options: pluginUtils.PluginOptions) {\n    debug('start storage plugin')\n    super(config, options)\n    this.config = options.config\n    this.logger = options.logger\n\n    const url = ENV.DATABASE_URL || config?.url\n    this.storageConfig = { url }\n\n    if (!this.storageConfig.url) {\n      throw errorUtils.getServiceUnavailable(\n        '[sql-storage] missing config. Add `store.sql-storage.url` to your config file or use environtment DATABASE_URL',\n      )\n    }\n\n    this.db = getDatabase(this.storageConfig.url, this.logger)\n    this.token = new TokenService(this.db, this.logger)\n    this.localPackage = new LocalPackagesService(this.db, this.logger)\n    this.verdaccioSecret = new VerdaccioSecretService(this.db, this.logger)\n    this.downloads = new DownloadsService(this.db, this.logger)\n    this.eventLog = new EventLogService(this.db, this.logger)\n\n    debug('Verdaccio Pro storage sql plugin is enabled')\n  }\n\n  public async init(): Promise<void> {\n    debug('init plugin')\n  }\n\n  // Storage API\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public getPackageStorage(packageName: string): SqlStorageHandler {\n    return new SqlStorageHandler(this.db, this.logger)\n  }\n\n  // Secret API\n\n  public async getSecret(): Promise<string> {\n    debug('get secret')\n    return this.verdaccioSecret.get()\n  }\n\n  public async setSecret(secret: string): Promise<string | null> {\n    debug('set secret')\n    return this.verdaccioSecret.set(secret)\n  }\n\n  // Package API\n\n  public async get(): Promise<string[]> {\n    debug('get complete package list')\n    return this.localPackage.get()\n  }\n\n  public async add(packageName: string): Promise<void> {\n    debug('add package %o', packageName)\n    return this.localPackage.add(packageName)\n  }\n\n  public async remove(packageName: string): Promise<void> {\n    debug('remove package %o', packageName)\n    return this.localPackage.remove(packageName)\n  }\n\n  public async search(query: searchUtils.SearchQuery): Promise<searchUtils.SearchItem[]> {\n    debug('search for %o', query.text)\n    const results: searchUtils.SearchItem[] = []\n\n    const localResults = await PackageService.search(this.db, query)\n    debug('total results %o', localResults.length)\n\n    const allPackages = await this.get()\n    for (const result of localResults) {\n      const isPrivate = allPackages.includes(result.name)\n      // use time to store the ranking\n      const score = {\n        final: result.time as number,\n        detail: {\n          maintenance: 1,\n          popularity: 1,\n          quality: 1,\n        },\n      }\n      results.push({\n        package: result,\n        verdaccioPrivate: isPrivate,\n        verdaccioPkgCached: !isPrivate,\n        score,\n      })\n    }\n\n    return results\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private async getScore(item: searchUtils.SearchItemPkg): Promise<searchUtils.Score> {\n    // TODO: there is no particular reason to predefined scores\n    return {\n      final: 1,\n      detail: {\n        maintenance: 0,\n        popularity: 1,\n        quality: 1,\n      },\n    }\n  }\n\n  // Token API\n\n  public async readTokens(filter: TokenFilter): Promise<Token[]> {\n    debug('get tokens for user %o', filter.user)\n    return this.token.read(filter)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async saveToken(token: Token): Promise<any> {\n    debug('save token for user %o', token.user)\n    return this.token.save(token)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async deleteToken(user: string, tokenKey: string): Promise<any> {\n    debug('delete token for user %o and token %o', user, tokenKey)\n    return this.token.delete(user, tokenKey)\n  }\n\n  // Verdaccio Pro - Download Counters\n\n  public async incrementDownloads(filename: string): Promise<void> {\n    debug('increment downloads for tarball %o', filename)\n    return this.downloads.increment(filename)\n  }\n\n  public async getDownloads(timeslice: string, start: string, end?: string): Promise<Downloads[] | null> {\n    debug('get downloads from %o to %o for timeslice %o', start, end, timeslice)\n    return this.downloads.getDownloads(timeslice, start, end)\n  }\n\n  public async getDownloadsByPackage(packageName: string, start: string, end?: string): Promise<Downloads[] | null> {\n    debug('get downloads from %o to %o for package %o', start, end, packageName)\n    return this.downloads.getByPackage(packageName, start, end)\n  }\n\n  public async getDownloadsByVersion(packageName: string, start: string, end?: string): Promise<DownloadsByVersion[] | null> {\n    debug('get downloads from %o to %o for package %o', start, end, packageName)\n    return this.downloads.getByVersion(packageName, start, end)\n  }\n\n  // Verdaccio Pro - Activity Log\n\n  public async logActivity(user: string, method: Method, event: string, name: string, version?: string): Promise<void> {\n    debug('activity %o', { user, method, event, name, version })\n    return this.eventLog.log(user, method, event, name, version)\n  }\n\n  // Escape special characters (like lodash.escapeRegExp)\n  private escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n  }\n}\n\nexport default SqlStoragePlugin\n","import { drizzle } from 'drizzle-orm/node-postgres'\nimport { Logger } from '@verdaccio/types'\n\nimport { ENV } from '../env'\nimport { loggerFactory } from './logger'\n\nexport type Database = ReturnType<typeof drizzle>\n\nexport const getDatabase = (url: string, logger?: Logger): Database => {\n  const drizzleLogger = loggerFactory(logger)\n\n  const db = drizzle({\n    connection: {\n      connectionString: url,\n      max:\n        ENV.DB_MIGRATING || ENV.DB_SEEDING || ENV.DB_RESET\n          ? 1\n          : ENV.DB_POOL_SIZE,\n      ssl: true,\n    },\n    logger: drizzleLogger,\n  })\n\n  if (logger) logger.info('database connected')\n\n  return db\n}\n","import { config } from 'dotenv'\nimport z from 'zod'\n\nconst stringBoolean = z.coerce\n  .string()\n  .transform((val) => {\n    return val === 'true'\n  })\n  .default(false)\n\nconst envSchema = z.object({\n  NODE_ENV: z.string().default('development'),\n  DATABASE_SECRET: z.string().trim().min(1),\n  DATABASE_URL: z.string().trim().min(1),\n  DB_POOL_SIZE: z.coerce.number().default(22),\n  DB_LOGGING: stringBoolean,\n  DB_MIGRATING: stringBoolean,\n  DB_SEEDING: stringBoolean,\n  DB_RESET: stringBoolean,\n})\n\n// Load environment variables from .env file\nconfig({ debug: false, quiet: true })\n\nconst envServer = envSchema.safeParse({\n  NODE_ENV: process.env.NODE_ENV,\n  DATABASE_SECRET: process.env.DATABASE_SECRET,\n  DATABASE_URL: process.env.DATABASE_URL,\n  DB_POOL_SIZE: process.env.DB_POOL_SIZE,\n  DB_LOGGING: process.env.DB_LOGGING,\n  DB_MIGRATING: process.env.DB_MIGRATING,\n  DB_SEEDING: process.env.DB_SEEDING,\n  DB_RESET: process.env.DB_RESET,\n})\n\nif (!envServer.success) {\n  throw new Error(envServer.error.message)\n}\n\ntype Env = z.infer<typeof envSchema>\n\nexport const ENV: Env = envSchema.parse(process.env)\n","import { DefaultLogger, LogWriter } from 'drizzle-orm/logger'\nimport { Logger } from '@verdaccio/types'\nimport { BLUE, CYAN, GREEN, MAGENTA, RED, RESET, YELLOW } from './tools/colors'\n\nclass VerdaccioLogWriter implements LogWriter {\n  constructor(private logger: Logger) {}\n\n  write(message: string) {\n    const msg = message.replace(/^Query:\\s*/i, '')\n\n    const coloredMsg = msg.replace(/^(\\w+)/i, (_, word) => {\n      const lword = word.toLowerCase()\n      const colors = {\n        select: CYAN,\n        insert: BLUE,\n        update: GREEN,\n        delete: MAGENTA,\n        truncate: RED,\n      }\n      const color = colors[lword as keyof typeof colors]\n      return `${color || YELLOW}${word}${RESET}`\n    })\n\n    this.logger.info(`SQL: ${coloredMsg}`)\n  }\n}\n\nexport const loggerFactory = (logger?: Logger): DefaultLogger | undefined => {\n  return logger ? new DefaultLogger({ writer: new VerdaccioLogWriter(logger!) }) : undefined\n}\n","export const BLACK = '\\x1b[30m'\nexport const RED = '\\x1b[31m'\nexport const GREEN = '\\x1b[32m'\nexport const YELLOW = '\\x1b[33m'\nexport const BLUE = '\\x1b[34m'\nexport const MAGENTA = '\\x1b[35m'\nexport const CYAN = '\\x1b[36m'\nexport const WHITE = '\\x1b[37m'\nexport const RESET = '\\x1b[0m'\n","import buildDebug from 'debug'\nimport { and, eq, isNull } from 'drizzle-orm'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { events, eventLog, users } from '../db/schema'\nimport { TenantService } from './tenant'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nexport const ANONYMOUS_USER = '#'\n\nexport type Method = 'get' | 'post' | 'put' | 'delete'\n\nexport class EventLogService {\n  private db: Database\n  private logger: Logger\n  private tenant: TenantService\n  private eventCache: Map<string, number>\n  private userCache: Map<string, number>\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n    this.tenant = new TenantService(database, logger)\n    this.eventCache = new Map()\n    this.userCache = new Map()\n  }\n\n  public async log(user: string, method: Method, event: string, name: string, version?: string): Promise<void> {\n    const org_id = await this.tenant.get(name)\n\n    const data = {\n      org_id,\n      user_id: await this.getUserId(user),\n      method,\n      event_id: await this.getEventId(event),\n      name,\n      version,\n    }\n\n    try {\n      await this.db\n        .insert(eventLog)\n        .values(data)\n\n      debug('activity logged successfully')\n    }\n    catch (error) {\n      debug('activity error: %o', error)\n    }\n  }\n\n  private async getUserId(user: string): Promise<number> {\n    if (!user || user === '') {\n      return this.getUserId(ANONYMOUS_USER)\n    }\n\n    if (this.userCache.has(user)) {\n      return this.userCache.get(user)!\n    }\n\n    const [ids] = await this.db\n      .select({ id: users.id })\n      .from(users)\n      .where(and(eq(users.user, user), isNull(users.deleted)))\n\n    if (!ids) {\n      throw errorUtils.getNotFound(`user \"${user}\" not found`)\n    }\n\n    const id = ids.id\n    this.userCache.set(user, id)\n    return id\n  }\n\n  private async getEventId(event: string): Promise<number> {\n    if (this.eventCache.has(event)) {\n      return this.eventCache.get(event)!\n    }\n\n    const [ids] = await this.db\n      .select({ id: events.id })\n      .from(events)\n      .where(eq(events.event, event))\n\n    if (!ids) {\n      throw errorUtils.getNotFound(`event \"${event}\" not found`)\n    }\n\n    const id = ids.id\n    this.eventCache.set(event, id)\n    return id\n  }\n}\n","import { sql } from 'drizzle-orm'\nimport {\n  boolean,\n  customType,\n  date,\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  primaryKey,\n  serial,\n  text,\n  timestamp,\n} from 'drizzle-orm/pg-core'\n\n// Common columns\nconst timestamps = {\n  created: timestamp().defaultNow().notNull(),\n  updated: timestamp().defaultNow().notNull(),\n}\nconst timestampsDeleted = {\n  ...timestamps,\n  deleted: timestamp(),\n}\n\n// Team package permissions\nexport const permissionEnum = pgEnum('permissions', ['r', 'w'])\n// Time slices for downloads\nexport const timesliceEnum = pgEnum('timeslices', ['d', 'm', 'y', 't'])\n// Event methods\nexport const methodEnum = pgEnum('methods', ['get', 'post', 'put', 'delete'])\n\n// Binary columns\n// https://github.com/drizzle-team/drizzle-orm/issues/298#issuecomment-3223856537\nexport const bytea = customType<{ data: Buffer, notNull: false, default: false }>({\n  dataType() {\n    return 'bytea'\n  },\n  fromDriver(value: unknown): Buffer<ArrayBufferLike> {\n    if (value instanceof Buffer) {\n      return value\n    }\n\n    if (typeof value === 'string') {\n      return Buffer.from(value.replace(/\\\\x/g, ''), 'hex')\n    }\n\n    throw new Error(`Cannot convert type: ${typeof value} to buffer`)\n  },\n})\n\n/**\n * Users\n */\nexport const users = pgTable('users', {\n  id: serial().unique(),\n  // user slug: mbtools\n  user: text().primaryKey(),\n  // Marc Bernard\n  fullname: text(),\n  // I build awesome open-source tools for SAP customers, partners, and developers\n  description: text(),\n  // mbtools@github.com\n  email: text(),\n  email_verified: boolean().notNull().default(false),\n  // https://marcf.be\n  homepage: text(),\n  // https://github.com/mbtools\n  github: text(),\n  // Other links\n  links: jsonb(),\n  ...timestampsDeleted,\n})\n\n/**\n * User Secrets\n */\nexport const userSecrets = pgTable('user_secrets', {\n  id: serial().unique(),\n  user: text().primaryKey(),\n  hash: text().notNull(),\n  email: text().notNull(),\n  ...timestampsDeleted,\n})\n\n/**\n * Roles\n */\nexport const roles = pgTable('roles', {\n  id: serial().unique(),\n  // admin, member, owner\n  role: text().primaryKey(),\n  description: text(),\n  ...timestampsDeleted,\n})\n\n/**\n * Organizations\n */\nexport const orgs = pgTable('orgs', {\n  id: serial().unique(),\n  // org slug: @apm\n  org: text().primaryKey(),\n  // apm.to Inc.\n  name: text(),\n  // We are the company behind apm Package Manager for ABAP 📦, the apm Website 🌐, and the apm Registry 📑\n  description: text(),\n  // https://apm.to\n  homepage: text(),\n  // https://github.com/abappm\n  github: text(),\n  // Other links\n  links: jsonb(),\n  ...timestampsDeleted,\n})\n\n/**\n * Organization Members\n */\nexport const orgMembers = pgTable('org_members', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  user_id: integer().references(() => users.id),\n  role_id: integer().references(() => roles.id),\n  ...timestampsDeleted,\n},\nt => [primaryKey({ columns: [t.org_id, t.user_id, t.role_id] })],\n)\n\n/**\n * Teams\n */\nexport const teams = pgTable('teams', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  team: text().notNull(),\n  description: text(),\n  ...timestampsDeleted,\n},\nt => [primaryKey({ columns: [t.org_id, t.team] })],\n)\n\n/**\n * Team Members\n */\nexport const teamMembers = pgTable('team_members', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  team_id: integer().references(() => teams.id),\n  user_id: integer().references(() => users.id),\n  ...timestampsDeleted,\n},\nt => [primaryKey({ columns: [t.org_id, t.team_id, t.user_id] })],\n)\n\n/**\n * Team Packages\n */\nexport const teamPackages = pgTable('team_packages', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  team_id: integer().references(() => teams.id),\n  package_id: integer().references(() => packages.id),\n  permission: permissionEnum().$type<string>(),\n  ...timestampsDeleted,\n},\nt => [primaryKey({ columns: [t.org_id, t.team_id, t.package_id] })],\n)\n\n/**\n * Secrets\n */\nexport const secrets = pgTable('secrets', {\n  name: text().primaryKey(),\n  value: text().notNull(),\n  ...timestamps,\n})\n\n/**\n * Tokens\n */\nexport const tokens = pgTable('tokens', {\n  id: serial().unique(),\n  user: text().notNull(),\n  key: text().notNull(),\n  token: text().notNull(),\n  cidr: text().array(),\n  readonly: boolean().notNull(),\n  ...timestamps,\n},\nt => [primaryKey({ columns: [t.user, t.key] })],\n)\n\n/**\n * Local Packages\n */\nexport const localPackages = pgTable('local_packages', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  name: text().notNull(),\n  ...timestamps,\n},\nt => [primaryKey({ columns: [t.org_id, t.name] })],\n)\n\n/**\n * Packages\n */\nexport const packages = pgTable('packages', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  name: text().notNull(),\n  json: jsonb().notNull(),\n  ...timestampsDeleted,\n},\nt => [\n  primaryKey({ columns: [t.org_id, t.name] }),\n  // Fulltext search on JSON fields (name, description, keywords)\n  index('package_search_index').using('gin', sql`to_tsvector('english',\n    coalesce(${t.json}->>'name', '') || ' ' ||\n    coalesce(${t.json}->>'description', '') || ' ' ||\n    coalesce(${t.json}->>'keywords', ''))`)],\n)\n\n/**\n * Readmes\n */\nexport const readmes = pgTable('readmes', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  name: text().notNull(),\n  version: text().notNull(),\n  markdown: text().notNull(),\n  ...timestampsDeleted,\n},\nt => [\n  primaryKey({ columns: [t.org_id, t.name, t.version] }),\n  index('readme_search_index').using('gin', sql`to_tsvector('english', ${t.markdown})`)],\n)\n\n/**\n * Dist Tags\n */\nexport const distTags = pgTable('dist_tags', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  name: text().notNull(),\n  tag: text().notNull(),\n  version: text().notNull(),\n  ...timestamps,\n},\nt => [primaryKey({ columns: [t.org_id, t.name, t.tag, t.version] })],\n)\n\n/**\n * Tarballs\n */\nexport const tarballs = pgTable('tarballs', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  name: text().notNull(),\n  version: text().notNull(),\n  filename: text().notNull(),\n  data: bytea().notNull(),\n  size: integer().notNull(),\n  ...timestampsDeleted,\n},\nt => [primaryKey({ columns: [t.org_id, t.name, t.version] })],\n)\n\n/**\n * Downloads\n */\nexport const downloads = pgTable('downloads', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  timeslice: timesliceEnum().notNull().$type<string>(),\n  year: integer(),\n  month: integer(),\n  date: date(),\n  name: text(),\n  version: text(),\n  count: integer().notNull(),\n},\nt => [primaryKey({ columns: [t.org_id, t.timeslice, t.year, t.month, t.date, t.name, t.version] })],\n)\n\n/**\n * Events\n */\nexport const events = pgTable('events', {\n  id: serial().unique(),\n  event: text().notNull(),\n})\n\n/**\n * Event Log\n */\nexport const eventLog = pgTable('event_log', {\n  id: serial().unique(),\n  org_id: integer().references(() => orgs.id),\n  timestamp: timestamp().defaultNow().notNull(),\n  user_id: integer().references(() => users.id),\n  method: methodEnum().notNull(),\n  event_id: integer().references(() => events.id),\n  name: text(),\n  version: text(),\n},\nt => [primaryKey({ columns: [t.org_id, t.timestamp, t.user_id] })],\n)\n\n/**\n * Clerk User Management\n * https://clerk.com/\n * JSON Reference\n * https://github.com/clerk/javascript/blob/main/packages/types/src/json.ts\n */\n\n/**\n * Clerk Users\n */\nexport const clerkUsers = pgTable('clerk_users', {\n  // user_29w83sxmDNGwOuEthce5gg56FcC\n  clerk_user: text().primaryKey(),\n  clerk_json: jsonb(),\n  // user id\n  user_id: integer().references(() => users.id),\n  // user slug: mbtools\n  user: text().references(() => users.user),\n  ...timestampsDeleted,\n})\n\n/**\n * Clerk Organizations\n */\nexport const clerkOrgs = pgTable('clerk_orgs', {\n  // org_29w9IfBrPmcpi0IeBVaKtA7R94W\n  clerk_org: text().primaryKey(),\n  clerk_json: jsonb(),\n  // org id\n  org_id: integer().references(() => orgs.id),\n  // org slug: @apm\n  org: text().references(() => orgs.org),\n  ...timestampsDeleted,\n})\n\n/**\n * Clerk Organization Members\n */\nexport const clerkMembers = pgTable('clerk_members', {\n  // orgmem_29w9IptNja3mP8GDXpquBwN2qR9\n  clerk_member: text().primaryKey(),\n  clerk_json: jsonb(),\n  // org_29w9IfBrPmcpi0IeBVaKtA7R94W\n  clerk_org: text().references(() => clerkOrgs.clerk_org),\n  // user_29w83sxmDNGwOuEthce5gg56FcC\n  clerk_user: text().references(() => clerkUsers.clerk_user),\n  role: text().references(() => roles.role),\n  ...timestampsDeleted,\n})\n","import { eq } from 'drizzle-orm'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { orgs } from '../db/schema'\n\n// Needs to be seeded in the database (see db/seeds/data/orgs.json)\nexport const PUBLIC_PACKAGES = '@'\n\nexport class OrgService {\n  private db: Database\n  private logger: Logger\n  private orgCache: Map<string, number>\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n    this.orgCache = new Map()\n  }\n\n  public async getOrgId(name: string): Promise<number> {\n    const [ids] = await this.db\n      .select({ id: orgs.id })\n      .from(orgs)\n      .where(eq(orgs.org, name))\n\n    if (!ids) {\n      throw errorUtils.getNotFound(`organization \"${name}\" not found`)\n    }\n\n    return ids.id\n  };\n\n  public async getOrgIdfromPackage(name: string): Promise<number> {\n    // debug('get org id from package %o', name);\n    if (this.orgCache.has(name)) {\n      return this.orgCache.get(name)!\n    }\n\n    let orgId\n    if (name.includes('/')) {\n      orgId = await this.getOrgId(name.split('/')[0])\n    }\n    else {\n      orgId = await this.getOrgId(PUBLIC_PACKAGES)\n    }\n\n    // debug('org id is %o', orgId);\n    this.orgCache.set(name, orgId)\n    return orgId\n  };\n}\n","import { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { OrgService } from './org'\n\nexport class TenantService {\n  private org: OrgService\n\n  public constructor(database: Database, logger: Logger) {\n    this.org = new OrgService(database, logger)\n  }\n\n  public async get(name: string): Promise<number> {\n    // Tenant = Org\n    // This is cached in the OrgService\n    return await this.org.getOrgIdfromPackage(name)\n  }\n}\n","import buildDebug from 'debug'\nimport { and, between, eq, isNull, sql, sum } from 'drizzle-orm'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { downloads } from '../db/schema'\nimport { getPackageInfoFromFilename, getISODates } from './utils'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nexport type Downloads = {\n  date: string\n  count: number\n}\nexport type DownloadsByVersion = {\n  version: string\n  count: number\n}\n\nexport class DownloadsService {\n  private db: Database\n  private logger: Logger\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n  }\n\n  public async increment(filename: string): Promise<void> {\n    const { name, version } = getPackageInfoFromFilename(filename)\n\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = now.getMonth() + 1\n    const today = now.toISOString().split('T')[0]\n\n    // Daily by version; daily, monthly, yearly, and grand totals\n    const data = [\n      {\n        timeslice: 'd',\n        year,\n        month,\n        date: today,\n        name,\n        version,\n        count: 1,\n      },\n      {\n        timeslice: 'd',\n        year,\n        month,\n        date: today,\n        name: null,\n        version: null,\n        count: 1,\n      },\n      {\n        timeslice: 'm',\n        year,\n        month,\n        date: null,\n        name: null,\n        version: null,\n        count: 1,\n      },\n      {\n        timeslice: 'y',\n        year,\n        month: null,\n        date: null,\n        name: null,\n        version: null,\n        count: 1,\n      },\n      {\n        timeslice: 't',\n        year: null,\n        month: null,\n        date: null,\n        name: null,\n        version: null,\n        count: 1,\n      },\n    ]\n\n    try {\n      await this.db\n        .insert(downloads)\n        .values(data)\n        .onConflictDoUpdate({\n          target: [downloads.timeslice, downloads.year, downloads.month, downloads.date, downloads.name, downloads.version],\n          set: { count: sql`${downloads.count} + 1` },\n        })\n\n      debug('downloads incremented successfully')\n    }\n    catch (error) {\n      debug('downloads error: %o', error)\n    }\n  }\n\n  public async getDownloads(timeslice: string, start: string, end?: string): Promise<Downloads[] | null> {\n    const [startDate, endDate] = getISODates(start, end)\n\n    const data = await this.db\n      .select({\n        date: downloads.date,\n        count: sum(downloads.count),\n      })\n      .from(downloads)\n      .where(and(\n        eq(downloads.timeslice, timeslice),\n        between(downloads.date, startDate, endDate),\n        isNull(downloads.name)))\n      .groupBy(downloads.date)\n      .orderBy(downloads.date)\n\n    return data.map(d => ({ date: d.date!, count: Number(d.count) }))\n  }\n\n  public async getByPackage(packageName: string, start: string, end?: string): Promise<Downloads[] | null> {\n    const [startDate, endDate] = getISODates(start, end)\n\n    const data = await this.db\n      .select({\n        date: downloads.date,\n        count: sum(downloads.count),\n      })\n      .from(downloads)\n      .where(and(\n        eq(downloads.timeslice, 'd'),\n        between(downloads.date, startDate, endDate),\n        eq(downloads.name, packageName)))\n      .groupBy(downloads.date)\n      .orderBy(downloads.date)\n\n    return data.map(d => ({ date: d.date!, count: Number(d.count) }))\n  }\n\n  public async getByVersion(packageName: string, start: string, end?: string): Promise<DownloadsByVersion[] | null> {\n    const [startDate, endDate] = getISODates(start, end)\n\n    const data = await this.db\n      .select({\n        version: downloads.version,\n        count: sum(downloads.count),\n      })\n      .from(downloads)\n      .where(and(\n        eq(downloads.timeslice, 'd'),\n        between(downloads.date, startDate, endDate),\n        eq(downloads.name, packageName)))\n      .groupBy(downloads.version)\n      .orderBy(downloads.version)\n\n    return data.map(d => ({ version: d.version!, count: Number(d.count) }))\n  }\n}\n","import { Manifest } from '@verdaccio/types'\n\nexport type readmeVersion = {\n  version: string\n  markdown: string\n}\n\nexport const getReadmesFromManifest = (manifest: Manifest): readmeVersion[] => {\n  const readmes: readmeVersion[] = []\n  for (const version in manifest.versions) {\n    const readme = manifest.versions[version].readme\n    if (readme) {\n      readmes.push({ version, markdown: readme })\n    }\n  }\n  const latest = manifest.readme\n  if (latest) {\n    readmes.push({ version: 'latest', markdown: latest })\n  }\n  return readmes\n}\n\nexport const clearReadmesFromManifest = (manifest: Manifest): Manifest => {\n  const manifestCopy = JSON.parse(JSON.stringify(manifest))\n  for (const version in manifestCopy.versions) {\n    manifestCopy.versions[version].readme = ''\n  }\n  manifestCopy.readme = ''\n  return manifestCopy\n}\n\nexport const mergeReadmesIntoManifest = (manifest: Manifest, readmes: readmeVersion[]): Manifest => {\n  const manifestCopy = JSON.parse(JSON.stringify(manifest))\n  for (const readme of readmes) {\n    if (readme.version === 'latest') {\n      manifestCopy.readme = readme.markdown\n    }\n    else if (manifestCopy.versions[readme.version]) {\n      manifestCopy.versions[readme.version].readme = readme.markdown\n    }\n  }\n  return manifestCopy\n}\n\nexport const getPackageInfoFromFilename = (filename: string): { name: string, version: string } => {\n  // filename is in the format of `name-version.tgz`\n  const match = filename.match(/^(.*)-(\\d+\\.\\d+\\.\\d+.*)\\.tgz$/)\n  if (!match) {\n    throw new Error(`Invalid tarball filename: ${filename}`)\n  }\n  return { name: match[1], version: match[2] }\n}\n\nexport const getISODate = (date: string): string => {\n  return new Date(date).toISOString().split('T')[0]\n}\n\nexport const getISODates = (start: string, end?: string): string[] => {\n  const dates: string[] = []\n  dates.push(getISODate(start))\n  dates.push(getISODate(end || start))\n  return dates\n}\n\nexport const unescapeHtmlEntities = (json: string): string => {\n  return json.replace(/\\\\u003e/g, '>').replace(/\\\\u003c/g, '<').replace(/\\\\u0026/g, '&')\n}\n","import buildDebug from 'debug'\nimport { and, eq, sql } from 'drizzle-orm'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { localPackages } from '../db/schema'\nimport { TenantService } from './tenant'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nexport class LocalPackagesService {\n  private db: Database\n  private logger: Logger\n  private tenant: TenantService\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n    this.tenant = new TenantService(database, logger)\n  }\n\n  public async add(name: string): Promise<void> {\n    debug('add local package %o', name)\n    const org_id = await this.tenant.get(name)\n\n    try {\n      await this.db\n        .insert(localPackages)\n        .values({ org_id, name })\n        .onConflictDoUpdate({\n          target: [localPackages.org_id, localPackages.name],\n          set: { updated: new Date() },\n        })\n\n      debug('package %o has been added', name)\n    }\n    catch (error) {\n      debug('upsert error: %o', error)\n      throw errorUtils.getInternalError(`Error adding local package: ${error}`)\n    }\n  };\n\n  public async remove(name: string): Promise<void> {\n    debug('remove local package %o', name)\n    const org_id = await this.tenant.get(name)\n\n    try {\n      await this.db\n        .delete(localPackages)\n        .where(and(eq(localPackages.org_id, org_id), eq(localPackages.name, name)))\n\n      debug('package %o has been removed', name)\n    }\n    catch (error) {\n      debug('delete error: %o', error)\n      throw errorUtils.getInternalError(`Error deleting local package: ${error}`)\n    }\n  };\n\n  public async get(): Promise<string[]> {\n    debug('get full list of package')\n\n    const names = await this.db\n      .select({ name: localPackages.name })\n      .from(localPackages)\n      .orderBy(localPackages.name)\n    debug('list of %o packages has been fetched', names ? names.length : 0)\n    return names.map(row => row.name)\n  };\n\n  public async clean(): Promise<void> {\n    debug('clean all local packages')\n\n    await this.db\n      .execute(sql`TRUNCATE TABLE local_packages`)\n  };\n}\n","import buildDebug from 'debug'\nimport { and, eq, isNull, inArray, sql } from 'drizzle-orm'\nimport { errorUtils, searchUtils } from '@verdaccio/core'\nimport { Callback, Logger, Manifest } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { distTags, packages, readmes } from '../db/schema'\nimport { TenantService } from './tenant'\nimport {\n  clearReadmesFromManifest,\n  getReadmesFromManifest,\n  mergeReadmesIntoManifest,\n  unescapeHtmlEntities,\n} from './utils'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nexport type DistTagsList = { [name: string]: { [tag: string]: string } }\n\nexport class PackageService {\n  private db: Database\n  private logger: Logger\n  private tenant: TenantService\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n    this.tenant = new TenantService(database, logger)\n  }\n\n  public async exists(name: string): Promise<boolean> {\n    const org_id = await this.tenant.get(name)\n\n    const count = await this.db\n      .$count(packages,\n        and(\n          eq(packages.org_id, org_id),\n          eq(packages.name, name),\n          isNull(packages.deleted),\n        ))\n\n    const exists = count > 0\n    debug('package exists: %o', exists)\n    return exists\n  };\n\n  public async create(name: string, manifest: Manifest): Promise<void> {\n    await this.save(name, manifest)\n    debug('package created successfully')\n  };\n\n  public async read(name: string, noThrow?: boolean): Promise<Manifest> {\n    const org_id = await this.tenant.get(name)\n\n    const [packageJson] = await this.db\n      .select({ json: packages.json })\n      .from(packages)\n      .where(and(\n        eq(packages.org_id, org_id),\n        eq(packages.name, name),\n        isNull(packages.deleted),\n      ))\n\n    if (!packageJson) {\n      if (noThrow) {\n        return {} as Manifest\n      }\n      throw errorUtils.getNotFound('package.json not found')\n    }\n\n    const manifest = JSON.parse(unescapeHtmlEntities(JSON.stringify(packageJson.json))) as Manifest\n\n    const markdown = await this.db\n      .select({ version: readmes.version, markdown: readmes.markdown })\n      .from(readmes)\n      .where(and(\n        eq(readmes.org_id, org_id),\n        eq(readmes.name, name),\n        isNull(readmes.deleted),\n      ))\n\n    const manifestMerged = mergeReadmesIntoManifest(manifest, markdown)\n    debug('package read successfully')\n    return manifestMerged\n  };\n\n  public async save(name: string, manifest: Manifest): Promise<void> {\n    const org_id = await this.tenant.get(name)\n\n    await this.db.transaction(async (tx) => {\n      // Save dist-tags separately for efficient determination of the latest version\n      const tags = manifest['dist-tags']\n\n      const distTagsData = Object.entries(tags).map(([tag, version]) => ({\n        org_id,\n        tag,\n        name,\n        version,\n      }))\n\n      try {\n        await tx\n          .delete(distTags)\n          .where(and(\n            eq(distTags.org_id, org_id),\n            eq(distTags.name, name),\n          ))\n\n        debug('dist-tags deleted successfully')\n      }\n      catch (error) {\n        // Ignore error if no dist-tags to delete\n        debug('dist-tags delete error: %o', error)\n      }\n\n      if (distTagsData && distTagsData.length > 0) {\n        try {\n          await tx\n            .insert(distTags)\n            .values(distTagsData)\n\n          debug('dist-tags saved successfully')\n        }\n        catch (error) {\n          debug('dist-tags insert error: %o', error)\n          tx.rollback()\n        }\n      }\n\n      // Save markdown separately for efficient full text search\n      const markdown = getReadmesFromManifest(manifest)\n\n      const readmesData = markdown.map(row => ({\n        org_id,\n        name,\n        version: row.version,\n        markdown: row.markdown,\n        deleted: null,\n      }))\n\n      if (readmesData && readmesData.length > 0) {\n        try {\n          await tx\n            .insert(readmes)\n            .values(readmesData)\n            .onConflictDoUpdate({\n              target: [readmes.org_id, readmes.name, readmes.version],\n              set: { markdown: sql`excluded.markdown`, updated: new Date(), deleted: null },\n            })\n\n          debug('readmes saved successfully')\n        }\n        catch (error) {\n          debug('readmes error: %o', error)\n          tx.rollback()\n        }\n      }\n\n      const manifestClean = clearReadmesFromManifest(manifest)\n\n      try {\n        await tx\n          .insert(packages)\n          .values({\n            org_id,\n            name,\n            json: manifestClean,\n          })\n          .onConflictDoUpdate({\n            target: [packages.org_id, packages.name],\n            set: { json: sql`excluded.json`, updated: new Date(), deleted: null },\n          })\n\n        debug('package saved successfully')\n      }\n      catch (error) {\n        debug('packages error: %o', error)\n        tx.rollback()\n      }\n    })\n  };\n\n  public async update(name: string, handleUpdate: Callback): Promise<Manifest> {\n    // Potentially read the package with lock, then unlock after update\n    // but it's unlikely to have simultaneous updates (famous last words)\n    const manifest = await this.read(name, true)\n    const manifestUpdated = await handleUpdate(manifest)\n    debug('package updated successfully')\n    return manifestUpdated\n  };\n\n  public async delete(name: string): Promise<void> {\n    const org_id = await this.tenant.get(name)\n\n    await this.db.transaction(async (tx) => {\n      try {\n        await tx\n          .update(packages)\n          .set({ deleted: new Date() })\n          .where(and(\n            eq(packages.org_id, org_id),\n            eq(packages.name, name),\n          ))\n\n        debug('package deleted successfully')\n      }\n      catch (error) {\n        debug('packages error: %o', error)\n        tx.rollback()\n      }\n\n      try {\n        await tx\n          .update(readmes)\n          .set({ deleted: new Date() })\n          .where(and(\n            eq(readmes.org_id, org_id),\n            eq(readmes.name, name),\n          ))\n\n        debug('readmes deleted successfully')\n      }\n      catch (error) {\n        debug('readmes error: %o', error)\n        tx.rollback()\n      }\n\n      try {\n        await tx\n          .delete(distTags)\n          .where(and(\n            eq(distTags.org_id, org_id),\n            eq(distTags.name, name),\n          ))\n\n        debug('dist-tags deleted successfully')\n      }\n      catch (error) {\n        // Ignore error if no dist-tags to delete\n        debug('dist-tags error: %o', error)\n      }\n    })\n  };\n\n  public static async search(\n    db: Database,\n    query: searchUtils.SearchQuery,\n  ): Promise<searchUtils.SearchItemPkg[]> {\n    // FUTURE full text search\n    // https://orm.drizzle.team/docs/guides/postgresql-full-text-search\n\n    // TODO: cache and return requested slice of the results\n    const results: searchUtils.SearchItemPkg[] = []\n\n    const rows = await db\n      .select({\n        name: packages.name,\n        json: packages.json,\n        updated: packages.updated,\n        rank: sql<number>`ts_rank(\n          to_tsvector('english',\n            coalesce(${packages.json}->>'name', '') || ' ' ||\n            coalesce(${packages.json}->>'description', '') || ' ' ||\n            coalesce(${packages.json}->>'keywords', '')\n          ),\n          plainto_tsquery('english', ${query.text})\n        )`,\n      })\n      .from(packages)\n      .where(sql`to_tsvector('english',\n        coalesce(${packages.json}->>'name', '') || ' ' ||\n        coalesce(${packages.json}->>'description', '') || ' ' ||\n        coalesce(${packages.json}->>'keywords', '')\n      ) @@ plainto_tsquery('english', ${query.text}) AND ${packages.deleted} IS NULL`)\n      .orderBy(sql`rank DESC`)\n\n    // TODO: full text search of readmes\n\n    for (const row of rows) {\n      // Use time to store the ranking\n      // TODO: add rank to the result type in Verdaccio core\n      results.push({\n        name: row.name,\n        scoped: row.name,\n        path: undefined,\n        time: row.rank,\n      })\n    }\n\n    debug('%o packages found', results.length)\n\n    if (!results || results.length === 0) {\n      debug('no results found')\n      return results\n    }\n    debug('%o results found', results.length)\n\n    return results.slice(query.from, query.size)\n  };\n\n  public async getDistTags(names: string[]): Promise<DistTagsList> {\n    const result: DistTagsList = {}\n\n    const rows = await this.db\n      .select({\n        org_id: distTags.org_id,\n        name: distTags.name,\n        tag: distTags.tag,\n        version: distTags.version,\n      })\n      .from(distTags)\n      .where(inArray(distTags.name, names))\n      .orderBy(distTags.name, distTags.tag)\n\n    for (const row of rows) {\n      const org_id = await this.tenant.get(row.name)\n\n      if (row.org_id === org_id) {\n        result[row.name][row.tag] = row.version\n      }\n    }\n\n    return result\n  }\n}\n","import buildDebug from 'debug'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger, TokenFilter, Token as VerdaccioToken } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { tokens } from '../db/schema'\nimport { and, eq } from 'drizzle-orm'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nexport interface Token {\n  user: string\n  token: string\n  key: string\n  cidr?: string[] | null\n  readonly: boolean\n  created: Date\n  updated?: Date\n}\n\nexport class TokenService {\n  private db: Database\n  private logger: Logger\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n  }\n\n  public async read({ user }: TokenFilter): Promise<VerdaccioToken[]> {\n    const userTokens = await this.db\n      .select({\n        user: tokens.user,\n        key: tokens.key,\n        token: tokens.token,\n        cidr: tokens.cidr,\n        readonly: tokens.readonly,\n        created: tokens.created,\n        updated: tokens.updated,\n      })\n      .from(tokens)\n      .where(eq(tokens.user, user))\n      .orderBy(tokens.user, tokens.key)\n\n    if (!userTokens || userTokens.length === 0) {\n      debug('token not found')\n      return []\n    }\n\n    const verdaccioTokens = userTokens.map(token => TokenService.toVerdaccioToken(token))\n    debug('token read successfully')\n    return verdaccioTokens\n  }\n\n  public async save(token: VerdaccioToken): Promise<void> {\n    try {\n      await this.db\n        .insert(tokens)\n        .values(TokenService.fromVerdaccioToken(token))\n\n      debug('token saved successfully')\n    }\n    catch (error) {\n      debug('tokens error: %o', error)\n      throw errorUtils.getInternalError(`Error saving token: ${error}`)\n    }\n  }\n\n  public async delete(user: string, key: string): Promise<void> {\n    const exists = await this.db\n      .select()\n      .from(tokens)\n      .where(eq(tokens.user, user))\n\n    if (!exists || exists.length === 0) {\n      throw new Error('user not found')\n    }\n\n    try {\n      await this.db\n        .delete(tokens)\n        .where(and(eq(tokens.user, user), eq(tokens.key, key)))\n\n      debug('token deleted successfully')\n    }\n    catch (error) {\n      debug('tokens error: %o', error)\n      throw errorUtils.getInternalError(`Error deleting token: ${error}`)\n    }\n  }\n\n  private static toVerdaccioToken(token: Token): VerdaccioToken {\n    return {\n      ...token,\n      cidr: token.cidr || undefined,\n      created: token.created && token.created.getTime(),\n      updated: token.updated && token.updated.getTime(),\n    }\n  }\n\n  private static fromVerdaccioToken(token: VerdaccioToken): Token {\n    return {\n      ...token,\n      created: new Date(token.created),\n      updated: (token.updated && new Date(token.updated)) || undefined,\n    }\n  }\n}\n","import buildDebug from 'debug'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { secrets } from '../db/schema'\nimport { eq, sql } from 'drizzle-orm'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nconst SECRET_NAME = 'verdaccio'\n\nexport class VerdaccioSecretService {\n  private db: Database\n  private logger: Logger\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n  }\n\n  public async set(secret: string): Promise<string> {\n    try {\n      await this.db\n        .insert(secrets)\n        .values({ name: SECRET_NAME, value: secret })\n        .onConflictDoUpdate({\n          target: [secrets.name],\n          set: { value: sql`excluded.value`, updated: new Date() },\n        })\n\n      debug('secret set successfully')\n    }\n    catch (error) {\n      debug('secrets error: %o', error)\n      throw errorUtils.getInternalError(`Error setting secret: ${error}`)\n    }\n\n    return secret\n  };\n\n  public async get(): Promise<string> {\n    const [secret] = await this.db\n      .select({ value: secrets.value })\n      .from(secrets)\n      .where(eq(secrets.name, SECRET_NAME))\n\n    return secret ? secret.value : ''\n  };\n}\n","import buildDebug from 'debug'\nimport { Readable, Writable } from 'node:stream'\n\nimport { pluginUtils } from '@verdaccio/core'\nimport { Logger, Manifest } from '@verdaccio/types'\n\nimport { type Database } from './db'\nimport { PackageService } from './services/package'\nimport { TarballService } from './services/tarball'\n\nconst debug = buildDebug('verdaccio:plugin:pro:storage:sql:handler')\n\nclass SqlStorageHandler implements pluginUtils.StorageHandler {\n  public logger: Logger\n  private package: PackageService\n  private tarball: TarballService\n\n  public constructor(database: Database, logger: Logger) {\n    debug('start storage handler')\n    this.logger = logger\n    this.package = new PackageService(database, logger)\n    this.tarball = new TarballService(database, logger)\n  }\n\n  // Package API\n\n  public async readPackage(packageName: string): Promise<Manifest> {\n    debug('read package %o', packageName)\n    return this.package.read(packageName)\n  }\n\n  public async hasPackage(packageName: string): Promise<boolean> {\n    debug('has package %o', packageName)\n    return this.package.exists(packageName)\n  }\n\n  public async updatePackage(\n    packageName: string,\n    handleUpdate: (manifest: Manifest) => Promise<Manifest>,\n  ): Promise<Manifest> {\n    debug('update package %o', packageName)\n    return this.package.update(packageName, handleUpdate)\n  }\n\n  public async deletePackage(filename: string): Promise<void> {\n    debug('remove tarball %o', filename)\n    if (filename !== 'package.json') {\n      await this.tarball.delete(filename)\n    }\n  }\n\n  public async removePackage(packageName: string): Promise<void> {\n    debug('remove package %o', packageName)\n    return this.package.delete(packageName)\n  }\n\n  public async createPackage(packageName: string, manifest: Manifest): Promise<void> {\n    debug('create package %o', packageName)\n    return this.package.create(packageName, manifest)\n  }\n\n  public async savePackage(packageName: string, manifest: Manifest): Promise<void> {\n    debug('save package %o', packageName)\n    return this.package.save(packageName, manifest)\n  }\n\n  // Tarball API\n\n  public async hasTarball(fileName: string): Promise<boolean> {\n    debug('has tarball %o', fileName)\n    return this.tarball.exists(fileName)\n  }\n\n  public async readTarball(fileName: string, { signal }: { signal: AbortSignal }): Promise<Readable> {\n    debug('read tarball %o', fileName)\n    return this.tarball.read(fileName, { signal })\n  }\n\n  public async writeTarball(fileName: string, { signal }: { signal: AbortSignal }): Promise<Writable> {\n    debug('write tarball %o', fileName)\n    return this.tarball.write(fileName, { signal })\n  }\n\n  public async deleteTarball(fileName: string): Promise<void> {\n    debug('delete package %o', fileName)\n    return this.tarball.delete(fileName)\n  }\n}\n\nexport default SqlStorageHandler\n","import buildDebug from 'debug'\nimport { and, eq, isNull, sql } from 'drizzle-orm'\nimport { Readable, Writable } from 'stream'\nimport { errorUtils } from '@verdaccio/core'\nimport { Logger } from '@verdaccio/types'\n\nimport { type Database } from '../db'\nimport { tarballs } from '../db/schema'\nimport { TenantService } from './tenant'\nimport { getPackageInfoFromFilename } from './utils'\n\nconst debug = buildDebug('verdaccio:plugin:storage:sql')\n\nconst CHUNK_SIZE = 256 * 1024 // 256KB\n\nexport class TarballService {\n  private db: Database\n  private logger: Logger\n  private tenant: TenantService\n\n  public constructor(database: Database, logger: Logger) {\n    this.db = database\n    this.logger = logger\n    this.tenant = new TenantService(database, logger)\n  }\n\n  public async exists(name: string): Promise<boolean> {\n    const org_id = await this.tenant.get(name)\n\n    const count = await this.db\n      .$count(tarballs,\n        and(\n          eq(tarballs.org_id, org_id),\n          eq(tarballs.name, name),\n          isNull(tarballs.deleted),\n        ))\n\n    const exists = count > 0\n    debug('tarball exists: %o', exists)\n    return exists\n  }\n\n  public async read(filename: string, { signal }: { signal: AbortSignal }): Promise<Readable> {\n    const { name } = getPackageInfoFromFilename(filename)\n    const org_id = await this.tenant.get(name)\n\n    const [tarballData] = await this.db\n      .select({\n        data: tarballs.data,\n        size: tarballs.size,\n      })\n      .from(tarballs)\n      .where(and(\n        eq(tarballs.org_id, org_id),\n        eq(tarballs.filename, filename),\n        isNull(tarballs.deleted),\n      ))\n\n    if (!tarballData) {\n      throw errorUtils.getNotFound(`Tarball not found: ${filename}`)\n    }\n\n    const readable = new Readable({\n      read() {\n        for (let i = 0; i < tarballData.data.length; i += CHUNK_SIZE) {\n          const dataChunk = tarballData.data.subarray(i, i + CHUNK_SIZE)\n          this.push(dataChunk)\n          if (dataChunk.length !== CHUNK_SIZE) {\n            break\n          }\n        }\n        this.push(null)\n      },\n    })\n\n    signal.addEventListener('abort', () => {\n      debug('aborting read stream')\n      tarballData.data = Buffer.alloc(0)\n      readable.destroy()\n    })\n\n    readable.on('open', () => {\n      debug('opening read stream')\n      readable.emit('content-size', tarballData.size)\n    })\n\n    process.nextTick(() => {\n      readable.emit('open')\n    })\n\n    debug('returning readable stream')\n    return readable\n  }\n\n  public async write(filename: string, { signal }: { signal: AbortSignal }): Promise<Writable> {\n    const { name, version } = getPackageInfoFromFilename(filename)\n    const org_id = await this.tenant.get(name)\n\n    const chunks: Buffer[] = []\n\n    const writable = new Writable({\n      write(chunk, encoding, callback) {\n        chunks.push(Buffer.from(chunk))\n        callback()\n      },\n    })\n\n    signal.addEventListener('abort', () => {\n      debug('aborting write stream')\n      writable.destroy()\n    })\n\n    process.nextTick(() => {\n      debug('opening write stream')\n      writable.emit('open')\n    })\n\n    writable.on('finish', async () => {\n      const data = Buffer.concat(chunks)\n\n      const tarballData = {\n        org_id,\n        name,\n        version,\n        filename,\n        data,\n        size: data.length,\n      }\n\n      try {\n        await this.db\n          .insert(tarballs)\n          .values(tarballData)\n          .onConflictDoUpdate({\n            target: [tarballs.org_id, tarballs.name, tarballs.version],\n            set: {\n              data: sql`excluded.data`,\n              size: sql`excluded.size`,\n              updated: new Date(),\n              deleted: null,\n            },\n          })\n\n        debug('tarball written successfully')\n      }\n      catch (err) {\n        debug('write error: %o', err)\n        tarballData.data = Buffer.alloc(0)\n        writable.destroy(err as Error)\n      }\n    })\n\n    writable.on('error', (err) => {\n      debug('write stream error: %o', err)\n      writable.destroy(err)\n    })\n\n    debug('returning writable stream')\n    return writable\n  }\n\n  public async delete(filename: string): Promise<void> {\n    const { name, version } = getPackageInfoFromFilename(filename)\n    const org_id = await this.tenant.get(name)\n\n    // Note: This is a \"soft delete\" and does not delete the tarball from the database.\n    // The data remains in the large object storage.\n    try {\n      await this.db\n        .update(tarballs)\n        .set({ deleted: new Date() })\n        .where(and(\n          eq(tarballs.org_id, org_id),\n          eq(tarballs.name, name),\n          eq(tarballs.version, version),\n          eq(tarballs.filename, filename),\n        ))\n\n      debug('tarball deleted')\n    }\n    catch (error) {\n      debug('error: %o', error)\n      throw errorUtils.getInternalError(`Error deleting tarball: ${error}`)\n    }\n  }\n\n  public async remove(name: string): Promise<void> {\n    const org_id = await this.tenant.get(name)\n\n    // Note: This is a \"soft delete\" and does not delete the tarball from the database.\n    // The data remains in the large object storage.\n    try {\n      await this.db\n        .update(tarballs)\n        .set({ deleted: new Date() })\n        .where(and(\n          eq(tarballs.org_id, org_id),\n          eq(tarballs.name, name),\n        ))\n\n      debug('all tarballs removed')\n    }\n    catch (error) {\n      debug('error: %o', error)\n      throw errorUtils.getInternalError(`Error removing all tarballs: ${error}`)\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,gBAAuB;AAEvB,IAAAC,eAAqD;;;ACFrD,2BAAwB;;;ACAxB,oBAAuB;AACvB,iBAAc;AAEd,IAAM,gBAAgB,WAAAC,QAAE,OACrB,OAAO,EACP,UAAU,CAAC,QAAQ;AAClB,SAAO,QAAQ;AACjB,CAAC,EACA,QAAQ,KAAK;AAEhB,IAAM,YAAY,WAAAA,QAAE,OAAO;AAAA,EACzB,UAAU,WAAAA,QAAE,OAAO,EAAE,QAAQ,aAAa;AAAA,EAC1C,iBAAiB,WAAAA,QAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC;AAAA,EACxC,cAAc,WAAAA,QAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC;AAAA,EACrC,cAAc,WAAAA,QAAE,OAAO,OAAO,EAAE,QAAQ,EAAE;AAAA,EAC1C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,UAAU;AACZ,CAAC;AAAA,IAGD,sBAAO,EAAE,OAAO,OAAO,OAAO,KAAK,CAAC;AAEpC,IAAM,YAAY,UAAU,UAAU;AAAA,EACpC,UAAU,QAAQ,IAAI;AAAA,EACtB,iBAAiB,QAAQ,IAAI;AAAA,EAC7B,cAAc,QAAQ,IAAI;AAAA,EAC1B,cAAc,QAAQ,IAAI;AAAA,EAC1B,YAAY,QAAQ,IAAI;AAAA,EACxB,cAAc,QAAQ,IAAI;AAAA,EAC1B,YAAY,QAAQ,IAAI;AAAA,EACxB,UAAU,QAAQ,IAAI;AACxB,CAAC;AAED,IAAI,CAAC,UAAU,SAAS;AACtB,QAAM,IAAI,MAAM,UAAU,MAAM,OAAO;AACzC;AAIO,IAAM,MAAW,UAAU,MAAM,QAAQ,GAAG;;;ACzCnD,oBAAyC;;;ACClC,IAAM,MAAM;AACZ,IAAM,QAAQ;AACd,IAAM,SAAS;AACf,IAAM,OAAO;AACb,IAAM,UAAU;AAChB,IAAM,OAAO;AAEb,IAAM,QAAQ;;;ADJrB,IAAM,qBAAN,MAA8C;AAAA,EAC5C,YAAoB,QAAgB;AAAhB;AAAA,EAAiB;AAAA,EAErC,MAAM,SAAiB;AACrB,UAAM,MAAM,QAAQ,QAAQ,eAAe,EAAE;AAE7C,UAAM,aAAa,IAAI,QAAQ,WAAW,CAAC,GAAG,SAAS;AACrD,YAAM,QAAQ,KAAK,YAAY;AAC/B,YAAM,SAAS;AAAA,QACb,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AACA,YAAM,QAAQ,OAAO,KAA4B;AACjD,aAAO,GAAG,SAAS,MAAM,GAAG,IAAI,GAAG,KAAK;AAAA,IAC1C,CAAC;AAED,SAAK,OAAO,KAAK,QAAQ,UAAU,EAAE;AAAA,EACvC;AACF;AAEO,IAAM,gBAAgB,CAAC,WAA+C;AAC3E,SAAO,SAAS,IAAI,4BAAc,EAAE,QAAQ,IAAI,mBAAmB,MAAO,EAAE,CAAC,IAAI;AACnF;;;AFrBO,IAAM,cAAc,CAAC,KAAa,WAA8B;AACrE,QAAM,gBAAgB,cAAc,MAAM;AAE1C,QAAM,SAAK,8BAAQ;AAAA,IACjB,YAAY;AAAA,MACV,kBAAkB;AAAA,MAClB,KACE,IAAI,gBAAgB,IAAI,cAAc,IAAI,WACtC,IACA,IAAI;AAAA,MACV,KAAK;AAAA,IACP;AAAA,IACA,QAAQ;AAAA,EACV,CAAC;AAED,MAAI,OAAQ,QAAO,KAAK,oBAAoB;AAE5C,SAAO;AACT;;;AI1BA,mBAAuB;AACvB,IAAAC,sBAAgC;AAChC,IAAAC,eAA2B;;;ACF3B,yBAAoB;AACpB,qBAaO;AAGP,IAAM,aAAa;AAAA,EACjB,aAAS,0BAAU,EAAE,WAAW,EAAE,QAAQ;AAAA,EAC1C,aAAS,0BAAU,EAAE,WAAW,EAAE,QAAQ;AAC5C;AACA,IAAM,oBAAoB;AAAA,EACxB,GAAG;AAAA,EACH,aAAS,0BAAU;AACrB;AAGO,IAAM,qBAAiB,uBAAO,eAAe,CAAC,KAAK,GAAG,CAAC;AAEvD,IAAM,oBAAgB,uBAAO,cAAc,CAAC,KAAK,KAAK,KAAK,GAAG,CAAC;AAE/D,IAAM,iBAAa,uBAAO,WAAW,CAAC,OAAO,QAAQ,OAAO,QAAQ,CAAC;AAIrE,IAAM,YAAQ,2BAA6D;AAAA,EAChF,WAAW;AACT,WAAO;AAAA,EACT;AAAA,EACA,WAAW,OAAyC;AAClD,QAAI,iBAAiB,QAAQ;AAC3B,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO,OAAO,KAAK,MAAM,QAAQ,QAAQ,EAAE,GAAG,KAAK;AAAA,IACrD;AAEA,UAAM,IAAI,MAAM,wBAAwB,OAAO,KAAK,YAAY;AAAA,EAClE;AACF,CAAC;AAKM,IAAM,YAAQ,wBAAQ,SAAS;AAAA,EACpC,QAAI,uBAAO,EAAE,OAAO;AAAA;AAAA,EAEpB,UAAM,qBAAK,EAAE,WAAW;AAAA;AAAA,EAExB,cAAU,qBAAK;AAAA;AAAA,EAEf,iBAAa,qBAAK;AAAA;AAAA,EAElB,WAAO,qBAAK;AAAA,EACZ,oBAAgB,wBAAQ,EAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA;AAAA,EAEjD,cAAU,qBAAK;AAAA;AAAA,EAEf,YAAQ,qBAAK;AAAA;AAAA,EAEb,WAAO,sBAAM;AAAA,EACb,GAAG;AACL,CAAC;AAKM,IAAM,kBAAc,wBAAQ,gBAAgB;AAAA,EACjD,QAAI,uBAAO,EAAE,OAAO;AAAA,EACpB,UAAM,qBAAK,EAAE,WAAW;AAAA,EACxB,UAAM,qBAAK,EAAE,QAAQ;AAAA,EACrB,WAAO,qBAAK,EAAE,QAAQ;AAAA,EACtB,GAAG;AACL,CAAC;AAKM,IAAM,YAAQ,wBAAQ,SAAS;AAAA,EACpC,QAAI,uBAAO,EAAE,OAAO;AAAA;AAAA,EAEpB,UAAM,qBAAK,EAAE,WAAW;AAAA,EACxB,iBAAa,qBAAK;AAAA,EAClB,GAAG;AACL,CAAC;AAKM,IAAM,WAAO,wBAAQ,QAAQ;AAAA,EAClC,QAAI,uBAAO,EAAE,OAAO;AAAA;AAAA,EAEpB,SAAK,qBAAK,EAAE,WAAW;AAAA;AAAA,EAEvB,UAAM,qBAAK;AAAA;AAAA,EAEX,iBAAa,qBAAK;AAAA;AAAA,EAElB,cAAU,qBAAK;AAAA;AAAA,EAEf,YAAQ,qBAAK;AAAA;AAAA,EAEb,WAAO,sBAAM;AAAA,EACb,GAAG;AACL,CAAC;AAKM,IAAM,iBAAa;AAAA,EAAQ;AAAA,EAAe;AAAA,IAC/C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;AAC/D;AAKO,IAAM,YAAQ;AAAA,EAAQ;AAAA,EAAS;AAAA,IACpC,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,iBAAa,qBAAK;AAAA,IAClB,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AACjD;AAKO,IAAM,kBAAc;AAAA,EAAQ;AAAA,EAAgB;AAAA,IACjD,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;AAC/D;AAKO,IAAM,mBAAe;AAAA,EAAQ;AAAA,EAAiB;AAAA,IACnD,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,gBAAY,wBAAQ,EAAE,WAAW,MAAM,SAAS,EAAE;AAAA,IAClD,YAAY,eAAe,EAAE,MAAc;AAAA,IAC3C,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;AAClE;AAKO,IAAM,cAAU,wBAAQ,WAAW;AAAA,EACxC,UAAM,qBAAK,EAAE,WAAW;AAAA,EACxB,WAAO,qBAAK,EAAE,QAAQ;AAAA,EACtB,GAAG;AACL,CAAC;AAKM,IAAM,aAAS;AAAA,EAAQ;AAAA,EAAU;AAAA,IACtC,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,SAAK,qBAAK,EAAE,QAAQ;AAAA,IACpB,WAAO,qBAAK,EAAE,QAAQ;AAAA,IACtB,UAAM,qBAAK,EAAE,MAAM;AAAA,IACnB,cAAU,wBAAQ,EAAE,QAAQ;AAAA,IAC5B,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AAC9C;AAKO,IAAM,oBAAgB;AAAA,EAAQ;AAAA,EAAkB;AAAA,IACrD,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AACjD;AAKO,IAAM,eAAW;AAAA,EAAQ;AAAA,EAAY;AAAA,IAC1C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,UAAM,sBAAM,EAAE,QAAQ;AAAA,IACtB,GAAG;AAAA,EACL;AAAA,EACA,OAAK;AAAA,QACH,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;AAAA;AAAA,QAE1C,sBAAM,sBAAsB,EAAE,MAAM,OAAO;AAAA,eAC9B,EAAE,IAAI;AAAA,eACN,EAAE,IAAI;AAAA,eACN,EAAE,IAAI,qBAAqB;AAAA,EAAC;AAC3C;AAKO,IAAM,cAAU;AAAA,EAAQ;AAAA,EAAW;AAAA,IACxC,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,aAAS,qBAAK,EAAE,QAAQ;AAAA,IACxB,cAAU,qBAAK,EAAE,QAAQ;AAAA,IACzB,GAAG;AAAA,EACL;AAAA,EACA,OAAK;AAAA,QACH,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;AAAA,QACrD,sBAAM,qBAAqB,EAAE,MAAM,OAAO,gDAA6B,EAAE,QAAQ,GAAG;AAAA,EAAC;AACvF;AAKO,IAAM,eAAW;AAAA,EAAQ;AAAA,EAAa;AAAA,IAC3C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,SAAK,qBAAK,EAAE,QAAQ;AAAA,IACpB,aAAS,qBAAK,EAAE,QAAQ;AAAA,IACxB,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;AACnE;AAKO,IAAM,eAAW;AAAA,EAAQ;AAAA,EAAY;AAAA,IAC1C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,UAAM,qBAAK,EAAE,QAAQ;AAAA,IACrB,aAAS,qBAAK,EAAE,QAAQ;AAAA,IACxB,cAAU,qBAAK,EAAE,QAAQ;AAAA,IACzB,MAAM,MAAM,EAAE,QAAQ;AAAA,IACtB,UAAM,wBAAQ,EAAE,QAAQ;AAAA,IACxB,GAAG;AAAA,EACL;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;AAC5D;AAKO,IAAM,gBAAY;AAAA,EAAQ;AAAA,EAAa;AAAA,IAC5C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,WAAW,cAAc,EAAE,QAAQ,EAAE,MAAc;AAAA,IACnD,UAAM,wBAAQ;AAAA,IACd,WAAO,wBAAQ;AAAA,IACf,UAAM,qBAAK;AAAA,IACX,UAAM,qBAAK;AAAA,IACX,aAAS,qBAAK;AAAA,IACd,WAAO,wBAAQ,EAAE,QAAQ;AAAA,EAC3B;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;AAClG;AAKO,IAAM,aAAS,wBAAQ,UAAU;AAAA,EACtC,QAAI,uBAAO,EAAE,OAAO;AAAA,EACpB,WAAO,qBAAK,EAAE,QAAQ;AACxB,CAAC;AAKM,IAAM,eAAW;AAAA,EAAQ;AAAA,EAAa;AAAA,IAC3C,QAAI,uBAAO,EAAE,OAAO;AAAA,IACpB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA,IAC1C,eAAW,0BAAU,EAAE,WAAW,EAAE,QAAQ;AAAA,IAC5C,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,IAC5C,QAAQ,WAAW,EAAE,QAAQ;AAAA,IAC7B,cAAU,wBAAQ,EAAE,WAAW,MAAM,OAAO,EAAE;AAAA,IAC9C,UAAM,qBAAK;AAAA,IACX,aAAS,qBAAK;AAAA,EAChB;AAAA,EACA,OAAK,KAAC,2BAAW,EAAE,SAAS,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC,CAAC;AACjE;AAYO,IAAM,iBAAa,wBAAQ,eAAe;AAAA;AAAA,EAE/C,gBAAY,qBAAK,EAAE,WAAW;AAAA,EAC9B,gBAAY,sBAAM;AAAA;AAAA,EAElB,aAAS,wBAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA;AAAA,EAE5C,UAAM,qBAAK,EAAE,WAAW,MAAM,MAAM,IAAI;AAAA,EACxC,GAAG;AACL,CAAC;AAKM,IAAM,gBAAY,wBAAQ,cAAc;AAAA;AAAA,EAE7C,eAAW,qBAAK,EAAE,WAAW;AAAA,EAC7B,gBAAY,sBAAM;AAAA;AAAA,EAElB,YAAQ,wBAAQ,EAAE,WAAW,MAAM,KAAK,EAAE;AAAA;AAAA,EAE1C,SAAK,qBAAK,EAAE,WAAW,MAAM,KAAK,GAAG;AAAA,EACrC,GAAG;AACL,CAAC;AAKM,IAAM,mBAAe,wBAAQ,iBAAiB;AAAA;AAAA,EAEnD,kBAAc,qBAAK,EAAE,WAAW;AAAA,EAChC,gBAAY,sBAAM;AAAA;AAAA,EAElB,eAAW,qBAAK,EAAE,WAAW,MAAM,UAAU,SAAS;AAAA;AAAA,EAEtD,gBAAY,qBAAK,EAAE,WAAW,MAAM,WAAW,UAAU;AAAA,EACzD,UAAM,qBAAK,EAAE,WAAW,MAAM,MAAM,IAAI;AAAA,EACxC,GAAG;AACL,CAAC;;;ACxWD,IAAAC,sBAAmB;AACnB,kBAA2B;AAOpB,IAAM,kBAAkB;AAExB,IAAM,aAAN,MAAiB;AAAA,EAKf,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AACd,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC1B;AAAA,EAEA,MAAa,SAAS,MAA+B;AACnD,UAAM,CAAC,GAAG,IAAI,MAAM,KAAK,GACtB,OAAO,EAAE,IAAI,KAAK,GAAG,CAAC,EACtB,KAAK,IAAI,EACT,UAAM,wBAAG,KAAK,KAAK,IAAI,CAAC;AAE3B,QAAI,CAAC,KAAK;AACR,YAAM,uBAAW,YAAY,iBAAiB,IAAI,aAAa;AAAA,IACjE;AAEA,WAAO,IAAI;AAAA,EACb;AAAA,EAEA,MAAa,oBAAoB,MAA+B;AAE9D,QAAI,KAAK,SAAS,IAAI,IAAI,GAAG;AAC3B,aAAO,KAAK,SAAS,IAAI,IAAI;AAAA,IAC/B;AAEA,QAAI;AACJ,QAAI,KAAK,SAAS,GAAG,GAAG;AACtB,cAAQ,MAAM,KAAK,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,IAChD,OACK;AACH,cAAQ,MAAM,KAAK,SAAS,eAAe;AAAA,IAC7C;AAGA,SAAK,SAAS,IAAI,MAAM,KAAK;AAC7B,WAAO;AAAA,EACT;AACF;;;AC/CO,IAAM,gBAAN,MAAoB;AAAA,EAGlB,YAAY,UAAoB,QAAgB;AACrD,SAAK,MAAM,IAAI,WAAW,UAAU,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAa,IAAI,MAA+B;AAG9C,WAAO,MAAM,KAAK,IAAI,oBAAoB,IAAI;AAAA,EAChD;AACF;;;AHRA,IAAM,YAAQ,aAAAC,SAAW,8BAA8B;AAEhD,IAAM,iBAAiB;AAIvB,IAAM,kBAAN,MAAsB;AAAA,EAOpB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AACd,SAAK,SAAS,IAAI,cAAc,UAAU,MAAM;AAChD,SAAK,aAAa,oBAAI,IAAI;AAC1B,SAAK,YAAY,oBAAI,IAAI;AAAA,EAC3B;AAAA,EAEA,MAAa,IAAI,MAAc,QAAgB,OAAe,MAAc,SAAiC;AAC3G,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,OAAO;AAAA,MACX;AAAA,MACA,SAAS,MAAM,KAAK,UAAU,IAAI;AAAA,MAClC;AAAA,MACA,UAAU,MAAM,KAAK,WAAW,KAAK;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAEA,QAAI;AACF,YAAM,KAAK,GACR,OAAO,QAAQ,EACf,OAAO,IAAI;AAEd,YAAM,8BAA8B;AAAA,IACtC,SACO,OAAO;AACZ,YAAM,sBAAsB,KAAK;AAAA,IACnC;AAAA,EACF;AAAA,EAEA,MAAc,UAAU,MAA+B;AACrD,QAAI,CAAC,QAAQ,SAAS,IAAI;AACxB,aAAO,KAAK,UAAU,cAAc;AAAA,IACtC;AAEA,QAAI,KAAK,UAAU,IAAI,IAAI,GAAG;AAC5B,aAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IAChC;AAEA,UAAM,CAAC,GAAG,IAAI,MAAM,KAAK,GACtB,OAAO,EAAE,IAAI,MAAM,GAAG,CAAC,EACvB,KAAK,KAAK,EACV,UAAM,6BAAI,wBAAG,MAAM,MAAM,IAAI,OAAG,4BAAO,MAAM,OAAO,CAAC,CAAC;AAEzD,QAAI,CAAC,KAAK;AACR,YAAM,wBAAW,YAAY,SAAS,IAAI,aAAa;AAAA,IACzD;AAEA,UAAM,KAAK,IAAI;AACf,SAAK,UAAU,IAAI,MAAM,EAAE;AAC3B,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,WAAW,OAAgC;AACvD,QAAI,KAAK,WAAW,IAAI,KAAK,GAAG;AAC9B,aAAO,KAAK,WAAW,IAAI,KAAK;AAAA,IAClC;AAEA,UAAM,CAAC,GAAG,IAAI,MAAM,KAAK,GACtB,OAAO,EAAE,IAAI,OAAO,GAAG,CAAC,EACxB,KAAK,MAAM,EACX,UAAM,wBAAG,OAAO,OAAO,KAAK,CAAC;AAEhC,QAAI,CAAC,KAAK;AACR,YAAM,wBAAW,YAAY,UAAU,KAAK,aAAa;AAAA,IAC3D;AAEA,UAAM,KAAK,IAAI;AACf,SAAK,WAAW,IAAI,OAAO,EAAE;AAC7B,WAAO;AAAA,EACT;AACF;;;AI/FA,IAAAC,gBAAuB;AACvB,IAAAC,sBAAmD;;;ACM5C,IAAM,yBAAyB,CAAC,aAAwC;AAC7E,QAAMC,WAA2B,CAAC;AAClC,aAAW,WAAW,SAAS,UAAU;AACvC,UAAM,SAAS,SAAS,SAAS,OAAO,EAAE;AAC1C,QAAI,QAAQ;AACV,MAAAA,SAAQ,KAAK,EAAE,SAAS,UAAU,OAAO,CAAC;AAAA,IAC5C;AAAA,EACF;AACA,QAAM,SAAS,SAAS;AACxB,MAAI,QAAQ;AACV,IAAAA,SAAQ,KAAK,EAAE,SAAS,UAAU,UAAU,OAAO,CAAC;AAAA,EACtD;AACA,SAAOA;AACT;AAEO,IAAM,2BAA2B,CAAC,aAAiC;AACxE,QAAM,eAAe,KAAK,MAAM,KAAK,UAAU,QAAQ,CAAC;AACxD,aAAW,WAAW,aAAa,UAAU;AAC3C,iBAAa,SAAS,OAAO,EAAE,SAAS;AAAA,EAC1C;AACA,eAAa,SAAS;AACtB,SAAO;AACT;AAEO,IAAM,2BAA2B,CAAC,UAAoBA,aAAuC;AAClG,QAAM,eAAe,KAAK,MAAM,KAAK,UAAU,QAAQ,CAAC;AACxD,aAAW,UAAUA,UAAS;AAC5B,QAAI,OAAO,YAAY,UAAU;AAC/B,mBAAa,SAAS,OAAO;AAAA,IAC/B,WACS,aAAa,SAAS,OAAO,OAAO,GAAG;AAC9C,mBAAa,SAAS,OAAO,OAAO,EAAE,SAAS,OAAO;AAAA,IACxD;AAAA,EACF;AACA,SAAO;AACT;AAEO,IAAM,6BAA6B,CAAC,aAAwD;AAEjG,QAAM,QAAQ,SAAS,MAAM,+BAA+B;AAC5D,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MAAM,6BAA6B,QAAQ,EAAE;AAAA,EACzD;AACA,SAAO,EAAE,MAAM,MAAM,CAAC,GAAG,SAAS,MAAM,CAAC,EAAE;AAC7C;AAEO,IAAM,aAAa,CAACC,UAAyB;AAClD,SAAO,IAAI,KAAKA,KAAI,EAAE,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAClD;AAEO,IAAM,cAAc,CAAC,OAAe,QAA2B;AACpE,QAAM,QAAkB,CAAC;AACzB,QAAM,KAAK,WAAW,KAAK,CAAC;AAC5B,QAAM,KAAK,WAAW,OAAO,KAAK,CAAC;AACnC,SAAO;AACT;AAEO,IAAM,uBAAuB,CAAC,SAAyB;AAC5D,SAAO,KAAK,QAAQ,YAAY,GAAG,EAAE,QAAQ,YAAY,GAAG,EAAE,QAAQ,YAAY,GAAG;AACvF;;;AD1DA,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAWhD,IAAM,mBAAN,MAAuB;AAAA,EAIrB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAa,UAAU,UAAiC;AACtD,UAAM,EAAE,MAAM,QAAQ,IAAI,2BAA2B,QAAQ;AAE7D,UAAM,MAAM,oBAAI,KAAK;AACrB,UAAM,OAAO,IAAI,YAAY;AAC7B,UAAM,QAAQ,IAAI,SAAS,IAAI;AAC/B,UAAM,QAAQ,IAAI,YAAY,EAAE,MAAM,GAAG,EAAE,CAAC;AAG5C,UAAM,OAAO;AAAA,MACX;AAAA,QACE,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN;AAAA,QACA;AAAA,QACA,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX;AAAA,QACA,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAI;AACF,YAAM,KAAK,GACR,OAAO,SAAS,EAChB,OAAO,IAAI,EACX,mBAAmB;AAAA,QAClB,QAAQ,CAAC,UAAU,WAAW,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,UAAU,MAAM,UAAU,OAAO;AAAA,QAChH,KAAK,EAAE,OAAO,0BAAM,UAAU,KAAK,OAAO;AAAA,MAC5C,CAAC;AAEH,MAAAD,OAAM,oCAAoC;AAAA,IAC5C,SACO,OAAO;AACZ,MAAAA,OAAM,uBAAuB,KAAK;AAAA,IACpC;AAAA,EACF;AAAA,EAEA,MAAa,aAAa,WAAmB,OAAe,KAA2C;AACrG,UAAM,CAAC,WAAW,OAAO,IAAI,YAAY,OAAO,GAAG;AAEnD,UAAM,OAAO,MAAM,KAAK,GACrB,OAAO;AAAA,MACN,MAAM,UAAU;AAAA,MAChB,WAAO,yBAAI,UAAU,KAAK;AAAA,IAC5B,CAAC,EACA,KAAK,SAAS,EACd,UAAM;AAAA,UACL,wBAAG,UAAU,WAAW,SAAS;AAAA,UACjC,6BAAQ,UAAU,MAAM,WAAW,OAAO;AAAA,UAC1C,4BAAO,UAAU,IAAI;AAAA,IAAC,CAAC,EACxB,QAAQ,UAAU,IAAI,EACtB,QAAQ,UAAU,IAAI;AAEzB,WAAO,KAAK,IAAI,QAAM,EAAE,MAAM,EAAE,MAAO,OAAO,OAAO,EAAE,KAAK,EAAE,EAAE;AAAA,EAClE;AAAA,EAEA,MAAa,aAAa,aAAqB,OAAe,KAA2C;AACvG,UAAM,CAAC,WAAW,OAAO,IAAI,YAAY,OAAO,GAAG;AAEnD,UAAM,OAAO,MAAM,KAAK,GACrB,OAAO;AAAA,MACN,MAAM,UAAU;AAAA,MAChB,WAAO,yBAAI,UAAU,KAAK;AAAA,IAC5B,CAAC,EACA,KAAK,SAAS,EACd,UAAM;AAAA,UACL,wBAAG,UAAU,WAAW,GAAG;AAAA,UAC3B,6BAAQ,UAAU,MAAM,WAAW,OAAO;AAAA,UAC1C,wBAAG,UAAU,MAAM,WAAW;AAAA,IAAC,CAAC,EACjC,QAAQ,UAAU,IAAI,EACtB,QAAQ,UAAU,IAAI;AAEzB,WAAO,KAAK,IAAI,QAAM,EAAE,MAAM,EAAE,MAAO,OAAO,OAAO,EAAE,KAAK,EAAE,EAAE;AAAA,EAClE;AAAA,EAEA,MAAa,aAAa,aAAqB,OAAe,KAAoD;AAChH,UAAM,CAAC,WAAW,OAAO,IAAI,YAAY,OAAO,GAAG;AAEnD,UAAM,OAAO,MAAM,KAAK,GACrB,OAAO;AAAA,MACN,SAAS,UAAU;AAAA,MACnB,WAAO,yBAAI,UAAU,KAAK;AAAA,IAC5B,CAAC,EACA,KAAK,SAAS,EACd,UAAM;AAAA,UACL,wBAAG,UAAU,WAAW,GAAG;AAAA,UAC3B,6BAAQ,UAAU,MAAM,WAAW,OAAO;AAAA,UAC1C,wBAAG,UAAU,MAAM,WAAW;AAAA,IAAC,CAAC,EACjC,QAAQ,UAAU,OAAO,EACzB,QAAQ,UAAU,OAAO;AAE5B,WAAO,KAAK,IAAI,QAAM,EAAE,SAAS,EAAE,SAAU,OAAO,OAAO,EAAE,KAAK,EAAE,EAAE;AAAA,EACxE;AACF;;;AE7JA,IAAAE,gBAAuB;AACvB,IAAAC,sBAA6B;AAC7B,IAAAC,eAA2B;AAO3B,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAEhD,IAAM,uBAAN,MAA2B;AAAA,EAKzB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AACd,SAAK,SAAS,IAAI,cAAc,UAAU,MAAM;AAAA,EAClD;AAAA,EAEA,MAAa,IAAI,MAA6B;AAC5C,IAAAD,OAAM,wBAAwB,IAAI;AAClC,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,QAAI;AACF,YAAM,KAAK,GACR,OAAO,aAAa,EACpB,OAAO,EAAE,QAAQ,KAAK,CAAC,EACvB,mBAAmB;AAAA,QAClB,QAAQ,CAAC,cAAc,QAAQ,cAAc,IAAI;AAAA,QACjD,KAAK,EAAE,SAAS,oBAAI,KAAK,EAAE;AAAA,MAC7B,CAAC;AAEH,MAAAA,OAAM,6BAA6B,IAAI;AAAA,IACzC,SACO,OAAO;AACZ,MAAAA,OAAM,oBAAoB,KAAK;AAC/B,YAAM,wBAAW,iBAAiB,+BAA+B,KAAK,EAAE;AAAA,IAC1E;AAAA,EACF;AAAA,EAEA,MAAa,OAAO,MAA6B;AAC/C,IAAAA,OAAM,2BAA2B,IAAI;AACrC,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,QAAI;AACF,YAAM,KAAK,GACR,OAAO,aAAa,EACpB,UAAM,6BAAI,wBAAG,cAAc,QAAQ,MAAM,OAAG,wBAAG,cAAc,MAAM,IAAI,CAAC,CAAC;AAE5E,MAAAA,OAAM,+BAA+B,IAAI;AAAA,IAC3C,SACO,OAAO;AACZ,MAAAA,OAAM,oBAAoB,KAAK;AAC/B,YAAM,wBAAW,iBAAiB,iCAAiC,KAAK,EAAE;AAAA,IAC5E;AAAA,EACF;AAAA,EAEA,MAAa,MAAyB;AACpC,IAAAA,OAAM,0BAA0B;AAEhC,UAAM,QAAQ,MAAM,KAAK,GACtB,OAAO,EAAE,MAAM,cAAc,KAAK,CAAC,EACnC,KAAK,aAAa,EAClB,QAAQ,cAAc,IAAI;AAC7B,IAAAA,OAAM,wCAAwC,QAAQ,MAAM,SAAS,CAAC;AACtE,WAAO,MAAM,IAAI,SAAO,IAAI,IAAI;AAAA,EAClC;AAAA,EAEA,MAAa,QAAuB;AAClC,IAAAA,OAAM,0BAA0B;AAEhC,UAAM,KAAK,GACR,QAAQ,sDAAkC;AAAA,EAC/C;AACF;;;AC7EA,IAAAE,gBAAuB;AACvB,IAAAC,sBAA8C;AAC9C,IAAAC,eAAwC;AAaxC,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAIhD,IAAM,iBAAN,MAAqB;AAAA,EAKnB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AACd,SAAK,SAAS,IAAI,cAAc,UAAU,MAAM;AAAA,EAClD;AAAA,EAEA,MAAa,OAAO,MAAgC;AAClD,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,QAAQ,MAAM,KAAK,GACtB;AAAA,MAAO;AAAA,UACN;AAAA,YACE,wBAAG,SAAS,QAAQ,MAAM;AAAA,YAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,YACtB,4BAAO,SAAS,OAAO;AAAA,MACzB;AAAA,IAAC;AAEL,UAAM,SAAS,QAAQ;AACvB,IAAAD,OAAM,sBAAsB,MAAM;AAClC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,OAAO,MAAc,UAAmC;AACnE,UAAM,KAAK,KAAK,MAAM,QAAQ;AAC9B,IAAAA,OAAM,8BAA8B;AAAA,EACtC;AAAA,EAEA,MAAa,KAAK,MAAc,SAAsC;AACpE,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,CAAC,WAAW,IAAI,MAAM,KAAK,GAC9B,OAAO,EAAE,MAAM,SAAS,KAAK,CAAC,EAC9B,KAAK,QAAQ,EACb,UAAM;AAAA,UACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,UAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,UACtB,4BAAO,SAAS,OAAO;AAAA,IACzB,CAAC;AAEH,QAAI,CAAC,aAAa;AAChB,UAAI,SAAS;AACX,eAAO,CAAC;AAAA,MACV;AACA,YAAM,wBAAW,YAAY,wBAAwB;AAAA,IACvD;AAEA,UAAM,WAAW,KAAK,MAAM,qBAAqB,KAAK,UAAU,YAAY,IAAI,CAAC,CAAC;AAElF,UAAM,WAAW,MAAM,KAAK,GACzB,OAAO,EAAE,SAAS,QAAQ,SAAS,UAAU,QAAQ,SAAS,CAAC,EAC/D,KAAK,OAAO,EACZ,UAAM;AAAA,UACL,wBAAG,QAAQ,QAAQ,MAAM;AAAA,UACzB,wBAAG,QAAQ,MAAM,IAAI;AAAA,UACrB,4BAAO,QAAQ,OAAO;AAAA,IACxB,CAAC;AAEH,UAAM,iBAAiB,yBAAyB,UAAU,QAAQ;AAClE,IAAAA,OAAM,2BAA2B;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,KAAK,MAAc,UAAmC;AACjE,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,KAAK,GAAG,YAAY,OAAO,OAAO;AAEtC,YAAM,OAAO,SAAS,WAAW;AAEjC,YAAM,eAAe,OAAO,QAAQ,IAAI,EAAE,IAAI,CAAC,CAAC,KAAK,OAAO,OAAO;AAAA,QACjE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,EAAE;AAEF,UAAI;AACF,cAAM,GACH,OAAO,QAAQ,EACf,UAAM;AAAA,cACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,cAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,QACxB,CAAC;AAEH,QAAAA,OAAM,gCAAgC;AAAA,MACxC,SACO,OAAO;AAEZ,QAAAA,OAAM,8BAA8B,KAAK;AAAA,MAC3C;AAEA,UAAI,gBAAgB,aAAa,SAAS,GAAG;AAC3C,YAAI;AACF,gBAAM,GACH,OAAO,QAAQ,EACf,OAAO,YAAY;AAEtB,UAAAA,OAAM,8BAA8B;AAAA,QACtC,SACO,OAAO;AACZ,UAAAA,OAAM,8BAA8B,KAAK;AACzC,aAAG,SAAS;AAAA,QACd;AAAA,MACF;AAGA,YAAM,WAAW,uBAAuB,QAAQ;AAEhD,YAAM,cAAc,SAAS,IAAI,UAAQ;AAAA,QACvC;AAAA,QACA;AAAA,QACA,SAAS,IAAI;AAAA,QACb,UAAU,IAAI;AAAA,QACd,SAAS;AAAA,MACX,EAAE;AAEF,UAAI,eAAe,YAAY,SAAS,GAAG;AACzC,YAAI;AACF,gBAAM,GACH,OAAO,OAAO,EACd,OAAO,WAAW,EAClB,mBAAmB;AAAA,YAClB,QAAQ,CAAC,QAAQ,QAAQ,QAAQ,MAAM,QAAQ,OAAO;AAAA,YACtD,KAAK,EAAE,UAAU,4CAAwB,SAAS,oBAAI,KAAK,GAAG,SAAS,KAAK;AAAA,UAC9E,CAAC;AAEH,UAAAA,OAAM,4BAA4B;AAAA,QACpC,SACO,OAAO;AACZ,UAAAA,OAAM,qBAAqB,KAAK;AAChC,aAAG,SAAS;AAAA,QACd;AAAA,MACF;AAEA,YAAM,gBAAgB,yBAAyB,QAAQ;AAEvD,UAAI;AACF,cAAM,GACH,OAAO,QAAQ,EACf,OAAO;AAAA,UACN;AAAA,UACA;AAAA,UACA,MAAM;AAAA,QACR,CAAC,EACA,mBAAmB;AAAA,UAClB,QAAQ,CAAC,SAAS,QAAQ,SAAS,IAAI;AAAA,UACvC,KAAK,EAAE,MAAM,wCAAoB,SAAS,oBAAI,KAAK,GAAG,SAAS,KAAK;AAAA,QACtE,CAAC;AAEH,QAAAA,OAAM,4BAA4B;AAAA,MACpC,SACO,OAAO;AACZ,QAAAA,OAAM,sBAAsB,KAAK;AACjC,WAAG,SAAS;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,OAAO,MAAc,cAA2C;AAG3E,UAAM,WAAW,MAAM,KAAK,KAAK,MAAM,IAAI;AAC3C,UAAM,kBAAkB,MAAM,aAAa,QAAQ;AACnD,IAAAA,OAAM,8BAA8B;AACpC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,OAAO,MAA6B;AAC/C,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,KAAK,GAAG,YAAY,OAAO,OAAO;AACtC,UAAI;AACF,cAAM,GACH,OAAO,QAAQ,EACf,IAAI,EAAE,SAAS,oBAAI,KAAK,EAAE,CAAC,EAC3B,UAAM;AAAA,cACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,cAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,QACxB,CAAC;AAEH,QAAAA,OAAM,8BAA8B;AAAA,MACtC,SACO,OAAO;AACZ,QAAAA,OAAM,sBAAsB,KAAK;AACjC,WAAG,SAAS;AAAA,MACd;AAEA,UAAI;AACF,cAAM,GACH,OAAO,OAAO,EACd,IAAI,EAAE,SAAS,oBAAI,KAAK,EAAE,CAAC,EAC3B,UAAM;AAAA,cACL,wBAAG,QAAQ,QAAQ,MAAM;AAAA,cACzB,wBAAG,QAAQ,MAAM,IAAI;AAAA,QACvB,CAAC;AAEH,QAAAA,OAAM,8BAA8B;AAAA,MACtC,SACO,OAAO;AACZ,QAAAA,OAAM,qBAAqB,KAAK;AAChC,WAAG,SAAS;AAAA,MACd;AAEA,UAAI;AACF,cAAM,GACH,OAAO,QAAQ,EACf,UAAM;AAAA,cACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,cAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,QACxB,CAAC;AAEH,QAAAA,OAAM,gCAAgC;AAAA,MACxC,SACO,OAAO;AAEZ,QAAAA,OAAM,uBAAuB,KAAK;AAAA,MACpC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,aAAoB,OAClB,IACA,OACsC;AAKtC,UAAM,UAAuC,CAAC;AAE9C,UAAM,OAAO,MAAM,GAChB,OAAO;AAAA,MACN,MAAM,SAAS;AAAA,MACf,MAAM,SAAS;AAAA,MACf,SAAS,SAAS;AAAA,MAClB,MAAM;AAAA;AAAA,uBAES,SAAS,IAAI;AAAA,uBACb,SAAS,IAAI;AAAA,uBACb,SAAS,IAAI;AAAA;AAAA,uCAEG,MAAM,IAAI;AAAA;AAAA,IAE3C,CAAC,EACA,KAAK,QAAQ,EACb,MAAM;AAAA,mBACM,SAAS,IAAI;AAAA,mBACb,SAAS,IAAI;AAAA,mBACb,SAAS,IAAI;AAAA,wCACQ,MAAM,IAAI,SAAS,SAAS,OAAO,UAAU,EAC9E,QAAQ,kCAAc;AAIzB,eAAW,OAAO,MAAM;AAGtB,cAAQ,KAAK;AAAA,QACX,MAAM,IAAI;AAAA,QACV,QAAQ,IAAI;AAAA,QACZ,MAAM;AAAA,QACN,MAAM,IAAI;AAAA,MACZ,CAAC;AAAA,IACH;AAEA,IAAAA,OAAM,qBAAqB,QAAQ,MAAM;AAEzC,QAAI,CAAC,WAAW,QAAQ,WAAW,GAAG;AACpC,MAAAA,OAAM,kBAAkB;AACxB,aAAO;AAAA,IACT;AACA,IAAAA,OAAM,oBAAoB,QAAQ,MAAM;AAExC,WAAO,QAAQ,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAa,YAAY,OAAwC;AAC/D,UAAM,SAAuB,CAAC;AAE9B,UAAM,OAAO,MAAM,KAAK,GACrB,OAAO;AAAA,MACN,QAAQ,SAAS;AAAA,MACjB,MAAM,SAAS;AAAA,MACf,KAAK,SAAS;AAAA,MACd,SAAS,SAAS;AAAA,IACpB,CAAC,EACA,KAAK,QAAQ,EACb,UAAM,6BAAQ,SAAS,MAAM,KAAK,CAAC,EACnC,QAAQ,SAAS,MAAM,SAAS,GAAG;AAEtC,eAAW,OAAO,MAAM;AACtB,YAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI,IAAI;AAE7C,UAAI,IAAI,WAAW,QAAQ;AACzB,eAAO,IAAI,IAAI,EAAE,IAAI,GAAG,IAAI,IAAI;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;;;ACpUA,IAAAE,gBAAuB;AACvB,IAAAC,eAA2B;AAK3B,IAAAC,sBAAwB;AAExB,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAYhD,IAAM,eAAN,MAAM,cAAa;AAAA,EAIjB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAa,KAAK,EAAE,KAAK,GAA2C;AAClE,UAAM,aAAa,MAAM,KAAK,GAC3B,OAAO;AAAA,MACN,MAAM,OAAO;AAAA,MACb,KAAK,OAAO;AAAA,MACZ,OAAO,OAAO;AAAA,MACd,MAAM,OAAO;AAAA,MACb,UAAU,OAAO;AAAA,MACjB,SAAS,OAAO;AAAA,MAChB,SAAS,OAAO;AAAA,IAClB,CAAC,EACA,KAAK,MAAM,EACX,UAAM,wBAAG,OAAO,MAAM,IAAI,CAAC,EAC3B,QAAQ,OAAO,MAAM,OAAO,GAAG;AAElC,QAAI,CAAC,cAAc,WAAW,WAAW,GAAG;AAC1C,MAAAD,OAAM,iBAAiB;AACvB,aAAO,CAAC;AAAA,IACV;AAEA,UAAM,kBAAkB,WAAW,IAAI,WAAS,cAAa,iBAAiB,KAAK,CAAC;AACpF,IAAAA,OAAM,yBAAyB;AAC/B,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,KAAK,OAAsC;AACtD,QAAI;AACF,YAAM,KAAK,GACR,OAAO,MAAM,EACb,OAAO,cAAa,mBAAmB,KAAK,CAAC;AAEhD,MAAAA,OAAM,0BAA0B;AAAA,IAClC,SACO,OAAO;AACZ,MAAAA,OAAM,oBAAoB,KAAK;AAC/B,YAAM,wBAAW,iBAAiB,uBAAuB,KAAK,EAAE;AAAA,IAClE;AAAA,EACF;AAAA,EAEA,MAAa,OAAO,MAAc,KAA4B;AAC5D,UAAM,SAAS,MAAM,KAAK,GACvB,OAAO,EACP,KAAK,MAAM,EACX,UAAM,wBAAG,OAAO,MAAM,IAAI,CAAC;AAE9B,QAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAClC,YAAM,IAAI,MAAM,gBAAgB;AAAA,IAClC;AAEA,QAAI;AACF,YAAM,KAAK,GACR,OAAO,MAAM,EACb,UAAM,6BAAI,wBAAG,OAAO,MAAM,IAAI,OAAG,wBAAG,OAAO,KAAK,GAAG,CAAC,CAAC;AAExD,MAAAA,OAAM,4BAA4B;AAAA,IACpC,SACO,OAAO;AACZ,MAAAA,OAAM,oBAAoB,KAAK;AAC/B,YAAM,wBAAW,iBAAiB,yBAAyB,KAAK,EAAE;AAAA,IACpE;AAAA,EACF;AAAA,EAEA,OAAe,iBAAiB,OAA8B;AAC5D,WAAO;AAAA,MACL,GAAG;AAAA,MACH,MAAM,MAAM,QAAQ;AAAA,MACpB,SAAS,MAAM,WAAW,MAAM,QAAQ,QAAQ;AAAA,MAChD,SAAS,MAAM,WAAW,MAAM,QAAQ,QAAQ;AAAA,IAClD;AAAA,EACF;AAAA,EAEA,OAAe,mBAAmB,OAA8B;AAC9D,WAAO;AAAA,MACL,GAAG;AAAA,MACH,SAAS,IAAI,KAAK,MAAM,OAAO;AAAA,MAC/B,SAAU,MAAM,WAAW,IAAI,KAAK,MAAM,OAAO,KAAM;AAAA,IACzD;AAAA,EACF;AACF;;;AC3GA,IAAAE,gBAAuB;AACvB,IAAAC,eAA2B;AAK3B,IAAAC,sBAAwB;AAExB,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAEvD,IAAM,cAAc;AAEb,IAAM,yBAAN,MAA6B;AAAA,EAI3B,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAa,IAAI,QAAiC;AAChD,QAAI;AACF,YAAM,KAAK,GACR,OAAO,OAAO,EACd,OAAO,EAAE,MAAM,aAAa,OAAO,OAAO,CAAC,EAC3C,mBAAmB;AAAA,QAClB,QAAQ,CAAC,QAAQ,IAAI;AAAA,QACrB,KAAK,EAAE,OAAO,yCAAqB,SAAS,oBAAI,KAAK,EAAE;AAAA,MACzD,CAAC;AAEH,MAAAD,OAAM,yBAAyB;AAAA,IACjC,SACO,OAAO;AACZ,MAAAA,OAAM,qBAAqB,KAAK;AAChC,YAAM,wBAAW,iBAAiB,yBAAyB,KAAK,EAAE;AAAA,IACpE;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,MAAuB;AAClC,UAAM,CAAC,MAAM,IAAI,MAAM,KAAK,GACzB,OAAO,EAAE,OAAO,QAAQ,MAAM,CAAC,EAC/B,KAAK,OAAO,EACZ,UAAM,wBAAG,QAAQ,MAAM,WAAW,CAAC;AAEtC,WAAO,SAAS,OAAO,QAAQ;AAAA,EACjC;AACF;;;ACjDA,IAAAE,gBAAuB;;;ACAvB,IAAAC,gBAAuB;AACvB,IAAAC,sBAAqC;AACrC,oBAAmC;AACnC,IAAAC,eAA2B;AAQ3B,IAAMC,aAAQ,cAAAC,SAAW,8BAA8B;AAEvD,IAAM,aAAa,MAAM;AAElB,IAAM,iBAAN,MAAqB;AAAA,EAKnB,YAAY,UAAoB,QAAgB;AACrD,SAAK,KAAK;AACV,SAAK,SAAS;AACd,SAAK,SAAS,IAAI,cAAc,UAAU,MAAM;AAAA,EAClD;AAAA,EAEA,MAAa,OAAO,MAAgC;AAClD,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,QAAQ,MAAM,KAAK,GACtB;AAAA,MAAO;AAAA,UACN;AAAA,YACE,wBAAG,SAAS,QAAQ,MAAM;AAAA,YAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,YACtB,4BAAO,SAAS,OAAO;AAAA,MACzB;AAAA,IAAC;AAEL,UAAM,SAAS,QAAQ;AACvB,IAAAD,OAAM,sBAAsB,MAAM;AAClC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,KAAK,UAAkB,EAAE,OAAO,GAA+C;AAC1F,UAAM,EAAE,KAAK,IAAI,2BAA2B,QAAQ;AACpD,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,CAAC,WAAW,IAAI,MAAM,KAAK,GAC9B,OAAO;AAAA,MACN,MAAM,SAAS;AAAA,MACf,MAAM,SAAS;AAAA,IACjB,CAAC,EACA,KAAK,QAAQ,EACb,UAAM;AAAA,UACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,UAC1B,wBAAG,SAAS,UAAU,QAAQ;AAAA,UAC9B,4BAAO,SAAS,OAAO;AAAA,IACzB,CAAC;AAEH,QAAI,CAAC,aAAa;AAChB,YAAM,wBAAW,YAAY,sBAAsB,QAAQ,EAAE;AAAA,IAC/D;AAEA,UAAM,WAAW,IAAI,uBAAS;AAAA,MAC5B,OAAO;AACL,iBAAS,IAAI,GAAG,IAAI,YAAY,KAAK,QAAQ,KAAK,YAAY;AAC5D,gBAAM,YAAY,YAAY,KAAK,SAAS,GAAG,IAAI,UAAU;AAC7D,eAAK,KAAK,SAAS;AACnB,cAAI,UAAU,WAAW,YAAY;AACnC;AAAA,UACF;AAAA,QACF;AACA,aAAK,KAAK,IAAI;AAAA,MAChB;AAAA,IACF,CAAC;AAED,WAAO,iBAAiB,SAAS,MAAM;AACrC,MAAAA,OAAM,sBAAsB;AAC5B,kBAAY,OAAO,OAAO,MAAM,CAAC;AACjC,eAAS,QAAQ;AAAA,IACnB,CAAC;AAED,aAAS,GAAG,QAAQ,MAAM;AACxB,MAAAA,OAAM,qBAAqB;AAC3B,eAAS,KAAK,gBAAgB,YAAY,IAAI;AAAA,IAChD,CAAC;AAED,YAAQ,SAAS,MAAM;AACrB,eAAS,KAAK,MAAM;AAAA,IACtB,CAAC;AAED,IAAAA,OAAM,2BAA2B;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,MAAM,UAAkB,EAAE,OAAO,GAA+C;AAC3F,UAAM,EAAE,MAAM,QAAQ,IAAI,2BAA2B,QAAQ;AAC7D,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAEzC,UAAM,SAAmB,CAAC;AAE1B,UAAM,WAAW,IAAI,uBAAS;AAAA,MAC5B,MAAM,OAAO,UAAU,UAAU;AAC/B,eAAO,KAAK,OAAO,KAAK,KAAK,CAAC;AAC9B,iBAAS;AAAA,MACX;AAAA,IACF,CAAC;AAED,WAAO,iBAAiB,SAAS,MAAM;AACrC,MAAAA,OAAM,uBAAuB;AAC7B,eAAS,QAAQ;AAAA,IACnB,CAAC;AAED,YAAQ,SAAS,MAAM;AACrB,MAAAA,OAAM,sBAAsB;AAC5B,eAAS,KAAK,MAAM;AAAA,IACtB,CAAC;AAED,aAAS,GAAG,UAAU,YAAY;AAChC,YAAM,OAAO,OAAO,OAAO,MAAM;AAEjC,YAAM,cAAc;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,MAAM,KAAK;AAAA,MACb;AAEA,UAAI;AACF,cAAM,KAAK,GACR,OAAO,QAAQ,EACf,OAAO,WAAW,EAClB,mBAAmB;AAAA,UAClB,QAAQ,CAAC,SAAS,QAAQ,SAAS,MAAM,SAAS,OAAO;AAAA,UACzD,KAAK;AAAA,YACH,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS,oBAAI,KAAK;AAAA,YAClB,SAAS;AAAA,UACX;AAAA,QACF,CAAC;AAEH,QAAAA,OAAM,8BAA8B;AAAA,MACtC,SACO,KAAK;AACV,QAAAA,OAAM,mBAAmB,GAAG;AAC5B,oBAAY,OAAO,OAAO,MAAM,CAAC;AACjC,iBAAS,QAAQ,GAAY;AAAA,MAC/B;AAAA,IACF,CAAC;AAED,aAAS,GAAG,SAAS,CAAC,QAAQ;AAC5B,MAAAA,OAAM,0BAA0B,GAAG;AACnC,eAAS,QAAQ,GAAG;AAAA,IACtB,CAAC;AAED,IAAAA,OAAM,2BAA2B;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,MAAa,OAAO,UAAiC;AACnD,UAAM,EAAE,MAAM,QAAQ,IAAI,2BAA2B,QAAQ;AAC7D,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAIzC,QAAI;AACF,YAAM,KAAK,GACR,OAAO,QAAQ,EACf,IAAI,EAAE,SAAS,oBAAI,KAAK,EAAE,CAAC,EAC3B,UAAM;AAAA,YACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,YAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,YACtB,wBAAG,SAAS,SAAS,OAAO;AAAA,YAC5B,wBAAG,SAAS,UAAU,QAAQ;AAAA,MAChC,CAAC;AAEH,MAAAA,OAAM,iBAAiB;AAAA,IACzB,SACO,OAAO;AACZ,MAAAA,OAAM,aAAa,KAAK;AACxB,YAAM,wBAAW,iBAAiB,2BAA2B,KAAK,EAAE;AAAA,IACtE;AAAA,EACF;AAAA,EAEA,MAAa,OAAO,MAA6B;AAC/C,UAAM,SAAS,MAAM,KAAK,OAAO,IAAI,IAAI;AAIzC,QAAI;AACF,YAAM,KAAK,GACR,OAAO,QAAQ,EACf,IAAI,EAAE,SAAS,oBAAI,KAAK,EAAE,CAAC,EAC3B,UAAM;AAAA,YACL,wBAAG,SAAS,QAAQ,MAAM;AAAA,YAC1B,wBAAG,SAAS,MAAM,IAAI;AAAA,MACxB,CAAC;AAEH,MAAAA,OAAM,sBAAsB;AAAA,IAC9B,SACO,OAAO;AACZ,MAAAA,OAAM,aAAa,KAAK;AACxB,YAAM,wBAAW,iBAAiB,gCAAgC,KAAK,EAAE;AAAA,IAC3E;AAAA,EACF;AACF;;;ADrMA,IAAME,aAAQ,cAAAC,SAAW,0CAA0C;AAEnE,IAAM,oBAAN,MAA8D;AAAA,EAKrD,YAAY,UAAoB,QAAgB;AACrD,IAAAD,OAAM,uBAAuB;AAC7B,SAAK,SAAS;AACd,SAAK,UAAU,IAAI,eAAe,UAAU,MAAM;AAClD,SAAK,UAAU,IAAI,eAAe,UAAU,MAAM;AAAA,EACpD;AAAA;AAAA,EAIA,MAAa,YAAY,aAAwC;AAC/D,IAAAA,OAAM,mBAAmB,WAAW;AACpC,WAAO,KAAK,QAAQ,KAAK,WAAW;AAAA,EACtC;AAAA,EAEA,MAAa,WAAW,aAAuC;AAC7D,IAAAA,OAAM,kBAAkB,WAAW;AACnC,WAAO,KAAK,QAAQ,OAAO,WAAW;AAAA,EACxC;AAAA,EAEA,MAAa,cACX,aACA,cACmB;AACnB,IAAAA,OAAM,qBAAqB,WAAW;AACtC,WAAO,KAAK,QAAQ,OAAO,aAAa,YAAY;AAAA,EACtD;AAAA,EAEA,MAAa,cAAc,UAAiC;AAC1D,IAAAA,OAAM,qBAAqB,QAAQ;AACnC,QAAI,aAAa,gBAAgB;AAC/B,YAAM,KAAK,QAAQ,OAAO,QAAQ;AAAA,IACpC;AAAA,EACF;AAAA,EAEA,MAAa,cAAc,aAAoC;AAC7D,IAAAA,OAAM,qBAAqB,WAAW;AACtC,WAAO,KAAK,QAAQ,OAAO,WAAW;AAAA,EACxC;AAAA,EAEA,MAAa,cAAc,aAAqB,UAAmC;AACjF,IAAAA,OAAM,qBAAqB,WAAW;AACtC,WAAO,KAAK,QAAQ,OAAO,aAAa,QAAQ;AAAA,EAClD;AAAA,EAEA,MAAa,YAAY,aAAqB,UAAmC;AAC/E,IAAAA,OAAM,mBAAmB,WAAW;AACpC,WAAO,KAAK,QAAQ,KAAK,aAAa,QAAQ;AAAA,EAChD;AAAA;AAAA,EAIA,MAAa,WAAW,UAAoC;AAC1D,IAAAA,OAAM,kBAAkB,QAAQ;AAChC,WAAO,KAAK,QAAQ,OAAO,QAAQ;AAAA,EACrC;AAAA,EAEA,MAAa,YAAY,UAAkB,EAAE,OAAO,GAA+C;AACjG,IAAAA,OAAM,mBAAmB,QAAQ;AACjC,WAAO,KAAK,QAAQ,KAAK,UAAU,EAAE,OAAO,CAAC;AAAA,EAC/C;AAAA,EAEA,MAAa,aAAa,UAAkB,EAAE,OAAO,GAA+C;AAClG,IAAAA,OAAM,oBAAoB,QAAQ;AAClC,WAAO,KAAK,QAAQ,MAAM,UAAU,EAAE,OAAO,CAAC;AAAA,EAChD;AAAA,EAEA,MAAa,cAAc,UAAiC;AAC1D,IAAAA,OAAM,qBAAqB,QAAQ;AACnC,WAAO,KAAK,QAAQ,OAAO,QAAQ;AAAA,EACrC;AACF;AAEA,IAAO,0BAAQ;;;AftEf,IAAME,aAAQ,cAAAC,SAAW,kCAAkC;AAE3D,IAAM,mBAAN,cACU,yBAAY,OAC0B;AAAA,EAWvC,YAAYC,SAAuB,SAAoC;AAC5E,IAAAF,OAAM,sBAAsB;AAC5B,UAAME,SAAQ,OAAO;AACrB,SAAK,SAAS,QAAQ;AACtB,SAAK,SAAS,QAAQ;AAEtB,UAAM,MAAM,IAAI,gBAAgBA,SAAQ;AACxC,SAAK,gBAAgB,EAAE,IAAI;AAE3B,QAAI,CAAC,KAAK,cAAc,KAAK;AAC3B,YAAM,wBAAW;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAEA,SAAK,KAAK,YAAY,KAAK,cAAc,KAAK,KAAK,MAAM;AACzD,SAAK,QAAQ,IAAI,aAAa,KAAK,IAAI,KAAK,MAAM;AAClD,SAAK,eAAe,IAAI,qBAAqB,KAAK,IAAI,KAAK,MAAM;AACjE,SAAK,kBAAkB,IAAI,uBAAuB,KAAK,IAAI,KAAK,MAAM;AACtE,SAAK,YAAY,IAAI,iBAAiB,KAAK,IAAI,KAAK,MAAM;AAC1D,SAAK,WAAW,IAAI,gBAAgB,KAAK,IAAI,KAAK,MAAM;AAExD,IAAAF,OAAM,6CAA6C;AAAA,EACrD;AAAA,EAEA,MAAa,OAAsB;AACjC,IAAAA,OAAM,aAAa;AAAA,EACrB;AAAA;AAAA;AAAA,EAKO,kBAAkB,aAAwC;AAC/D,WAAO,IAAI,wBAAkB,KAAK,IAAI,KAAK,MAAM;AAAA,EACnD;AAAA;AAAA,EAIA,MAAa,YAA6B;AACxC,IAAAA,OAAM,YAAY;AAClB,WAAO,KAAK,gBAAgB,IAAI;AAAA,EAClC;AAAA,EAEA,MAAa,UAAU,QAAwC;AAC7D,IAAAA,OAAM,YAAY;AAClB,WAAO,KAAK,gBAAgB,IAAI,MAAM;AAAA,EACxC;AAAA;AAAA,EAIA,MAAa,MAAyB;AACpC,IAAAA,OAAM,2BAA2B;AACjC,WAAO,KAAK,aAAa,IAAI;AAAA,EAC/B;AAAA,EAEA,MAAa,IAAI,aAAoC;AACnD,IAAAA,OAAM,kBAAkB,WAAW;AACnC,WAAO,KAAK,aAAa,IAAI,WAAW;AAAA,EAC1C;AAAA,EAEA,MAAa,OAAO,aAAoC;AACtD,IAAAA,OAAM,qBAAqB,WAAW;AACtC,WAAO,KAAK,aAAa,OAAO,WAAW;AAAA,EAC7C;AAAA,EAEA,MAAa,OAAO,OAAmE;AACrF,IAAAA,OAAM,iBAAiB,MAAM,IAAI;AACjC,UAAM,UAAoC,CAAC;AAE3C,UAAM,eAAe,MAAM,eAAe,OAAO,KAAK,IAAI,KAAK;AAC/D,IAAAA,OAAM,oBAAoB,aAAa,MAAM;AAE7C,UAAM,cAAc,MAAM,KAAK,IAAI;AACnC,eAAW,UAAU,cAAc;AACjC,YAAM,YAAY,YAAY,SAAS,OAAO,IAAI;AAElD,YAAM,QAAQ;AAAA,QACZ,OAAO,OAAO;AAAA,QACd,QAAQ;AAAA,UACN,aAAa;AAAA,UACb,YAAY;AAAA,UACZ,SAAS;AAAA,QACX;AAAA,MACF;AACA,cAAQ,KAAK;AAAA,QACX,SAAS;AAAA,QACT,kBAAkB;AAAA,QAClB,oBAAoB,CAAC;AAAA,QACrB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAc,SAAS,MAA6D;AAElF,WAAO;AAAA,MACL,OAAO;AAAA,MACP,QAAQ;AAAA,QACN,aAAa;AAAA,QACb,YAAY;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAIA,MAAa,WAAW,QAAuC;AAC7D,IAAAA,OAAM,0BAA0B,OAAO,IAAI;AAC3C,WAAO,KAAK,MAAM,KAAK,MAAM;AAAA,EAC/B;AAAA;AAAA,EAGA,MAAa,UAAU,OAA4B;AACjD,IAAAA,OAAM,0BAA0B,MAAM,IAAI;AAC1C,WAAO,KAAK,MAAM,KAAK,KAAK;AAAA,EAC9B;AAAA;AAAA,EAGA,MAAa,YAAY,MAAc,UAAgC;AACrE,IAAAA,OAAM,yCAAyC,MAAM,QAAQ;AAC7D,WAAO,KAAK,MAAM,OAAO,MAAM,QAAQ;AAAA,EACzC;AAAA;AAAA,EAIA,MAAa,mBAAmB,UAAiC;AAC/D,IAAAA,OAAM,sCAAsC,QAAQ;AACpD,WAAO,KAAK,UAAU,UAAU,QAAQ;AAAA,EAC1C;AAAA,EAEA,MAAa,aAAa,WAAmB,OAAe,KAA2C;AACrG,IAAAA,OAAM,gDAAgD,OAAO,KAAK,SAAS;AAC3E,WAAO,KAAK,UAAU,aAAa,WAAW,OAAO,GAAG;AAAA,EAC1D;AAAA,EAEA,MAAa,sBAAsB,aAAqB,OAAe,KAA2C;AAChH,IAAAA,OAAM,8CAA8C,OAAO,KAAK,WAAW;AAC3E,WAAO,KAAK,UAAU,aAAa,aAAa,OAAO,GAAG;AAAA,EAC5D;AAAA,EAEA,MAAa,sBAAsB,aAAqB,OAAe,KAAoD;AACzH,IAAAA,OAAM,8CAA8C,OAAO,KAAK,WAAW;AAC3E,WAAO,KAAK,UAAU,aAAa,aAAa,OAAO,GAAG;AAAA,EAC5D;AAAA;AAAA,EAIA,MAAa,YAAY,MAAc,QAAgB,OAAe,MAAc,SAAiC;AACnH,IAAAA,OAAM,eAAe,EAAE,MAAM,QAAQ,OAAO,MAAM,QAAQ,CAAC;AAC3D,WAAO,KAAK,SAAS,IAAI,MAAM,QAAQ,OAAO,MAAM,OAAO;AAAA,EAC7D;AAAA;AAAA,EAGQ,aAAa,QAAwB;AAC3C,WAAO,OAAO,QAAQ,uBAAuB,MAAM;AAAA,EACrD;AACF;AAEA,IAAO,yBAAQ;;;ADjMf,IAAO,gBAAQ;","names":["import_debug","import_core","z","import_drizzle_orm","import_core","import_drizzle_orm","buildDebug","import_debug","import_drizzle_orm","readmes","date","debug","buildDebug","import_debug","import_drizzle_orm","import_core","debug","buildDebug","import_debug","import_drizzle_orm","import_core","debug","buildDebug","import_debug","import_core","import_drizzle_orm","debug","buildDebug","import_debug","import_core","import_drizzle_orm","debug","buildDebug","import_debug","import_debug","import_drizzle_orm","import_core","debug","buildDebug","debug","buildDebug","debug","buildDebug","config"]}